{
    "project": {
        "name": "Documenting JavaScript with YUIDoc",
        "version": "0.0.1"
    },
    "files": {
        "src\\template-engine.js": {
            "name": "src\\template-engine.js",
            "modules": {},
            "classes": {
                "ky": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "test\\lib\\chai.js": {
            "name": "test\\lib\\chai.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "test\\lib\\mocha.js": {
            "name": "test\\lib\\mocha.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "test\\lib\\sinon.js": {
            "name": "test\\lib\\sinon.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "test\\test01.js": {
            "name": "test\\test01.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "ky": {
            "name": "ky",
            "shortname": "ky",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\template-engine.js",
            "line": 6,
            "description": "为了使用yuidoc生成文档。这里才声明成了class。"
        }
    },
    "classitems": [
        {
            "file": "src\\template-engine.js",
            "line": 17,
            "itemtype": "method",
            "name": "template",
            "params": [
                {
                    "name": "tpl",
                    "description": "模板代码",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "填充至模板中的数据",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "模板与数据结合后最终生成的视图",
                "type": "String"
            },
            "class": "ky"
        },
        {
            "file": "src\\template-engine.js",
            "line": 26,
            "itemtype": "method",
            "name": "templateFn 有些场景下，一份模板可能需要渲染多个视图，调用此函数，可以将解析后的模板缓存起来，防止重复解析。",
            "params": [
                {
                    "name": "tpl",
                    "description": "模板代码",
                    "type": "String"
                }
            ],
            "return": {
                "description": "模板解析后的函数，需要一个参数模型数据 data {Object}，返回值为渲染后的视图",
                "type": "Function"
            },
            "example": [
                "\n  var tpl=\"<%=name%> say:hello!\";\n\n  var fn=ky.templateFn(tpl);\n\n  fn({name:\"zlk\"});//结果zlk say:hello!"
            ],
            "class": "ky"
        },
        {
            "file": "src\\template-engine.js",
            "line": 38,
            "description": "CODE_REG在tpl中的某一匹配结果",
            "type": "{Array}",
            "class": "ky"
        },
        {
            "file": "src\\template-engine.js",
            "line": 43,
            "description": "CODE_REG在tpl中的某一匹配部分",
            "type": "{String}",
            "class": "ky"
        },
        {
            "file": "src\\template-engine.js",
            "line": 48,
            "description": "模板lastPos之前的代码已被解析。",
            "type": "{number}",
            "class": "ky"
        },
        {
            "file": "src\\template-engine.js",
            "line": 53,
            "description": "模板的长度",
            "type": "{Number}",
            "class": "ky"
        },
        {
            "file": "src\\template-engine.js",
            "line": 58,
            "description": "放入eval中执行的代码。",
            "type": "{string}",
            "class": "ky"
        },
        {
            "file": "src\\template-engine.js",
            "line": 63,
            "description": "EXPRESSION_REG在tpl中的某一匹配部分",
            "type": "{Array}",
            "class": "ky"
        },
        {
            "file": "src\\template-engine.js",
            "line": 68,
            "description": "放入eval中的执行的代码片段。",
            "type": "{String}",
            "class": "ky"
        },
        {
            "file": "src\\template-engine.js",
            "line": 107,
            "description": "view.join(\"\")为模板与数据结合后渲染成的视图",
            "type": "{Array}",
            "class": "ky"
        },
        {
            "file": "src\\template-engine.js",
            "line": 112,
            "description": "保存data的键值。",
            "type": "{String}",
            "class": "ky"
        },
        {
            "file": "src\\template-engine.js",
            "line": 117,
            "description": "增加parsedCode变量是为了保持evalCode不随着此函数的调用改变",
            "type": "{String}",
            "class": "ky"
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 3,
            "description": "Require the given path.",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "exports",
                "type": "Object"
            },
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 43,
            "description": "Registered modules.",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 49,
            "description": "Registered aliases.",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 55,
            "description": "Resolve `path`.\n\nLookup:\n\n  - PATH/index.js\n  - PATH.js\n  - PATH",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "path or null",
                "type": "String"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 87,
            "description": "Normalize `path` relative to the current path.",
            "params": [
                {
                    "name": "curr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 115,
            "description": "Register module at `path` with callback `definition`.",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "definition",
                    "description": "",
                    "type": "Function"
                }
            ],
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 127,
            "description": "Alias a module definition.",
            "params": [
                {
                    "name": "from",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "to",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 142,
            "description": "Return a require function relative to the `parent` path.",
            "params": [
                {
                    "name": "parent",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 153,
            "description": "lastIndexOf helper.",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 165,
            "description": "The relative require() itself.",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 174,
            "description": "Resolve relative to the parent.",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 193,
            "description": "Check if module is defined at `path`.",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 247,
            "description": "### AssertionError\n\nAn extension of the JavaScript `Error` constructor for\nassertion and validation scenarios.",
            "params": [
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "properties",
                    "description": "to include (optional)",
                    "type": "Object"
                },
                {
                    "name": "start",
                    "description": "stack function (optional)",
                    "type": "Callee"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 296,
            "description": "Allow errors to be converted to JSON for static transfer.",
            "params": [
                {
                    "name": "include",
                    "description": "stack (default: `true`)",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "object that can be `JSON.stringify`",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 341,
            "description": "### typeOf (obj)\n\nUse several different techniques to determine\nthe type of object being tested.",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "object type",
                "type": "String"
            },
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 364,
            "description": "### Library\n\nCreate a repository for custom type detection.\n\n```js\nvar lib = new type.Library;\n```",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 379,
            "description": "#### .of (obj)\n\nExpose replacement `typeof` detection to the library.\n\n```js\nif ('string' === lib.of('hello world')) {\n  // ...\n}\n```",
            "params": [
                {
                    "name": "object",
                    "description": "to test",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "type",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 396,
            "description": "#### .define (type, test)\n\nAdd a test to for the `.test()` assertion.\n\nCan be defined as a regular expression:\n\n```js\nlib.define('int', /^[0-9]+$/);\n```\n\n... or as a function:\n\n```js\nlib.define('bln', function (obj) {\n  if ('boolean' === lib.of(obj)) return true;\n  var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];\n  if ('string' === lib.of(obj)) obj = obj.toLowerCase();\n  return !! ~blns.indexOf(obj);\n});\n```",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "test",
                    "description": "",
                    "type": "RegExp|Function"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 429,
            "description": "#### .test (obj, test)\n\nAssert that an object is of type. Will first\ncheck natives, and if that does not pass it will\nuse the user defined custom tests.\n\n```js\nassert(lib.test('1', 'int'));\nassert(lib.test('yes', 'bln'));\n```",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "result",
                "type": "Boolean"
            },
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 491,
            "description": "Assert super-strict (egal) equality between\ntwo objects of any type.",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "memoised",
                    "description": "(optional)",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "equal match",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 753,
            "description": "# .use(function)\n\nProvides a way to extend the internals of Chai",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "for chaining",
                "type": "This"
            },
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 958,
            "description": "### Language Chains\n\nThe following are provided as chainable getters to\nimprove the readability of your assertions. They\ndo not provide an testing capability unless they\nhave been overwritten by a plugin.\n\n**Chains**\n\n- to\n- be\n- been\n- is\n- that\n- and\n- has\n- have\n- with\n- at\n- of\n- same",
            "name": "language chains",
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 994,
            "description": "### .not\n\nNegates any of assertions following in the chain.\n\n    expect(foo).to.not.equal('bar');\n    expect(goodFn).to.not.throw(Error);\n    expect({ foo: 'baz' }).to.have.property('foo')\n      .and.not.equal('bar');",
            "name": "not",
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 1012,
            "description": "### .deep\n\nSets the `deep` flag, later used by the `equal` and\n`property` assertions.\n\n    expect(foo).to.deep.equal({ bar: 'baz' });\n    expect({ foo: { bar: { baz: 'quux' } } })\n      .to.have.deep.property('foo.bar.baz', 'quux');",
            "name": "deep",
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 1030,
            "description": "### .a(type)\n\nThe `a` and `an` assertions are aliases that can be\nused either as language chains or to assert a value's\ntype.\n\n    // typeof\n    expect('test').to.be.a('string');\n    expect({ foo: 'bar' }).to.be.an('object');\n    expect(null).to.be.a('null');\n    expect(undefined).to.be.an('undefined');\n\n    // language chain\n    expect(foo).to.be.an.instanceof(Foo);",
            "name": "a",
            "alias": "an",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 1069,
            "description": "### .include(value)\n\nThe `include` and `contain` assertions can be used as either property\nbased language chains or as methods to assert the inclusion of an object\nin an array or a substring in a string. When used as language chains,\nthey toggle the `contain` flag for the `keys` assertion.\n\n    expect([1,2,3]).to.include(2);\n    expect('foobar').to.contain('foo');\n    expect({ foo: 'bar', hello: 'universe' }).to.include.keys('foo');",
            "name": "include",
            "alias": "contain",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object|String|Number"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 1116,
            "description": "### .ok\n\nAsserts that the target is truthy.\n\n    expect('everthing').to.be.ok;\n    expect(1).to.be.ok;\n    expect(false).to.not.be.ok;\n    expect(undefined).to.not.be.ok;\n    expect(null).to.not.be.ok;",
            "name": "ok",
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 1138,
            "description": "### .true\n\nAsserts that the target is `true`.\n\n    expect(true).to.be.true;\n    expect(1).to.not.be.true;",
            "name": "true",
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 1159,
            "description": "### .false\n\nAsserts that the target is `false`.\n\n    expect(false).to.be.false;\n    expect(0).to.not.be.false;",
            "name": "false",
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 1180,
            "description": "### .null\n\nAsserts that the target is `null`.\n\n    expect(null).to.be.null;\n    expect(undefined).not.to.be.null;",
            "name": "null",
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 1200,
            "description": "### .undefined\n\nAsserts that the target is `undefined`.\n\n    expect(undefined).to.be.undefined;\n    expect(null).to.not.be.undefined;",
            "name": "undefined",
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 1220,
            "description": "### .exist\n\nAsserts that the target is neither `null` nor `undefined`.\n\n    var foo = 'hi'\n      , bar = null\n      , baz;\n\n    expect(foo).to.exist;\n    expect(bar).to.not.exist;\n    expect(baz).to.not.exist;",
            "name": "exist",
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 1246,
            "description": "### .empty\n\nAsserts that the target's length is `0`. For arrays, it checks\nthe `length` property. For objects, it gets the count of\nenumerable keys.\n\n    expect([]).to.be.empty;\n    expect('').to.be.empty;\n    expect({}).to.be.empty;",
            "name": "empty",
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 1278,
            "description": "### .arguments\n\nAsserts that the target is an arguments object.\n\n    function test () {\n      expect(arguments).to.be.arguments;\n    }",
            "name": "arguments",
            "alias": "Arguments",
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 1305,
            "description": "### .equal(value)\n\nAsserts that the target is strictly equal (`===`) to `value`.\nAlternately, if the `deep` flag is set, asserts that\nthe target is deeply equal to `value`.\n\n    expect('hello').to.equal('hello');\n    expect(42).to.equal(42);\n    expect(1).to.not.equal(true);\n    expect({ foo: 'bar' }).to.not.equal({ foo: 'bar' });\n    expect({ foo: 'bar' }).to.deep.equal({ foo: 'bar' });",
            "name": "equal",
            "alias": "deep.equal",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 1348,
            "description": "### .eql(value)\n\nAsserts that the target is deeply equal to `value`.\n\n    expect({ foo: 'bar' }).to.eql({ foo: 'bar' });\n    expect([ 1, 2, 3 ]).to.eql([ 1, 2, 3 ]);",
            "name": "eql",
            "alias": "eqls",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 1378,
            "description": "### .above(value)\n\nAsserts that the target is greater than `value`.\n\n    expect(10).to.be.above(5);\n\nCan also be used in conjunction with `length` to\nassert a minimum length. The benefit being a\nmore informative error message than if the length\nwas supplied directly.\n\n    expect('foo').to.have.length.above(2);\n    expect([ 1, 2, 3 ]).to.have.length.above(2);",
            "name": "above",
            "alias": "greaterThan",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 1427,
            "description": "### .least(value)\n\nAsserts that the target is greater than or equal to `value`.\n\n    expect(10).to.be.at.least(10);\n\nCan also be used in conjunction with `length` to\nassert a minimum length. The benefit being a\nmore informative error message than if the length\nwas supplied directly.\n\n    expect('foo').to.have.length.of.at.least(2);\n    expect([ 1, 2, 3 ]).to.have.length.of.at.least(3);",
            "name": "least",
            "alias": "gte",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 1474,
            "description": "### .below(value)\n\nAsserts that the target is less than `value`.\n\n    expect(5).to.be.below(10);\n\nCan also be used in conjunction with `length` to\nassert a maximum length. The benefit being a\nmore informative error message than if the length\nwas supplied directly.\n\n    expect('foo').to.have.length.below(4);\n    expect([ 1, 2, 3 ]).to.have.length.below(4);",
            "name": "below",
            "alias": "lessThan",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 1523,
            "description": "### .most(value)\n\nAsserts that the target is less than or equal to `value`.\n\n    expect(5).to.be.at.most(5);\n\nCan also be used in conjunction with `length` to\nassert a maximum length. The benefit being a\nmore informative error message than if the length\nwas supplied directly.\n\n    expect('foo').to.have.length.of.at.most(4);\n    expect([ 1, 2, 3 ]).to.have.length.of.at.most(3);",
            "name": "most",
            "alias": "lte",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 1570,
            "description": "### .within(start, finish)\n\nAsserts that the target is within a range.\n\n    expect(7).to.be.within(5,10);\n\nCan also be used in conjunction with `length` to\nassert a length range. The benefit being a\nmore informative error message than if the length\nwas supplied directly.\n\n    expect('foo').to.have.length.within(2,4);\n    expect([ 1, 2, 3 ]).to.have.length.within(2,4);",
            "name": "within",
            "params": [
                {
                    "name": "start",
                    "description": "lowerbound inclusive",
                    "type": "Number"
                },
                {
                    "name": "finish",
                    "description": "upperbound inclusive",
                    "type": "Number"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 1613,
            "description": "### .instanceof(constructor)\n\nAsserts that the target is an instance of `constructor`.\n\n    var Tea = function (name) { this.name = name; }\n      , Chai = new Tea('chai');\n\n    expect(Chai).to.be.an.instanceof(Tea);\n    expect([ 1, 2, 3 ]).to.be.instanceof(Array);",
            "name": "instanceof",
            "params": [
                {
                    "name": "constructor",
                    "description": "",
                    "type": "Constructor"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "alias": "instanceOf",
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 1644,
            "description": "### .property(name, [value])\n\nAsserts that the target has a property `name`, optionally asserting that\nthe value of that property is strictly equal to  `value`.\nIf the `deep` flag is set, you can use dot- and bracket-notation for deep\nreferences into objects and arrays.\n\n    // simple referencing\n    var obj = { foo: 'bar' };\n    expect(obj).to.have.property('foo');\n    expect(obj).to.have.property('foo', 'bar');\n\n    // deep referencing\n    var deepObj = {\n        green: { tea: 'matcha' }\n      , teas: [ 'chai', 'matcha', { tea: 'konacha' } ]\n    };\n\n    expect(deepObj).to.have.deep.property('green.tea', 'matcha');\n    expect(deepObj).to.have.deep.property('teas[1]', 'matcha');\n    expect(deepObj).to.have.deep.property('teas[2].tea', 'konacha');\n\nYou can also use an array as the starting point of a `deep.property`\nassertion, or traverse nested arrays.\n\n    var arr = [\n        [ 'chai', 'matcha', 'konacha' ]\n      , [ { tea: 'chai' }\n        , { tea: 'matcha' }\n        , { tea: 'konacha' } ]\n    ];\n\n    expect(arr).to.have.deep.property('[0][1]', 'matcha');\n    expect(arr).to.have.deep.property('[1][2].tea', 'konacha');\n\nFurthermore, `property` changes the subject of the assertion\nto be the value of that property from the original object. This\npermits for further chainable assertions on that property.\n\n    expect(obj).to.have.property('foo')\n      .that.is.a('string');\n    expect(deepObj).to.have.property('green')\n      .that.is.an('object')\n      .that.deep.equals({ tea: 'matcha' });\n    expect(deepObj).to.have.property('teas')\n      .that.is.an('array')\n      .with.deep.property('[2]')\n        .that.deep.equals({ tea: 'konacha' });",
            "name": "property",
            "alias": "deep.property",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "(optional)",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "return": {
                "description": "value of property for chaining"
            },
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 1739,
            "description": "### .ownProperty(name)\n\nAsserts that the target has an own property `name`.\n\n    expect('test').to.have.ownProperty('length');",
            "name": "ownProperty",
            "alias": "haveOwnProperty",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 1766,
            "description": "### .length(value)\n\nAsserts that the target's `length` property has\nthe expected value.\n\n    expect([ 1, 2, 3]).to.have.length(3);\n    expect('foobar').to.have.length(6);\n\nCan also be used as a chain precursor to a value\ncomparison for the length property.\n\n    expect('foo').to.have.length.above(2);\n    expect([ 1, 2, 3 ]).to.have.length.above(2);\n    expect('foo').to.have.length.below(4);\n    expect([ 1, 2, 3 ]).to.have.length.below(4);\n    expect('foo').to.have.length.within(2,4);\n    expect([ 1, 2, 3 ]).to.have.length.within(2,4);",
            "name": "length",
            "alias": "lengthOf",
            "params": [
                {
                    "name": "length",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 1814,
            "description": "### .match(regexp)\n\nAsserts that the target matches a regular expression.\n\n    expect('foobar').to.match(/^foo/);",
            "name": "match",
            "params": [
                {
                    "name": "RegularExpression",
                    "description": "",
                    "type": "RegExp"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 1837,
            "description": "### .string(string)\n\nAsserts that the string target contains another string.\n\n    expect('foobar').to.have.string('bar');",
            "name": "string",
            "params": [
                {
                    "name": "string",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 1863,
            "description": "### .keys(key1, [key2], [...])\n\nAsserts that the target has exactly the given keys, or\nasserts the inclusion of some keys when using the\n`include` or `contain` modifiers.\n\n    expect({ foo: 1, bar: 2 }).to.have.keys(['foo', 'bar']);\n    expect({ foo: 1, bar: 2, baz: 3 }).to.contain.keys('foo', 'bar');",
            "name": "keys",
            "alias": "key",
            "params": [
                {
                    "name": "keys",
                    "description": "",
                    "type": "String...|Array"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 1931,
            "description": "### .throw(constructor)\n\nAsserts that the function target will throw a specific error, or specific type of error\n(as determined using `instanceof`), optionally with a RegExp or string inclusion test\nfor the error's message.\n\n    var err = new ReferenceError('This is a bad function.');\n    var fn = function () { throw err; }\n    expect(fn).to.throw(ReferenceError);\n    expect(fn).to.throw(Error);\n    expect(fn).to.throw(/bad function/);\n    expect(fn).to.not.throw('good function');\n    expect(fn).to.throw(ReferenceError, /bad function/);\n    expect(fn).to.throw(err);\n    expect(fn).to.not.throw(new RangeError('Out of range.'));\n\nPlease note that when a throw expectation is negated, it will check each\nparameter independently, starting with error constructor type. The appropriate way\nto check for the existence of a type of error but for a message that does not match\nis to use `and`.\n\n    expect(fn).to.throw(ReferenceError)\n       .and.not.throw(/good function/);",
            "name": "throw",
            "alias": "Throw",
            "params": [
                {
                    "name": "constructor",
                    "description": "",
                    "type": "ErrorConstructor"
                },
                {
                    "name": "expected",
                    "description": "error message",
                    "type": "String|RegExp"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "see": [
                "https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types"
            ],
            "return": {
                "description": "error for chaining (null if no error)"
            },
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2088,
            "description": "### .respondTo(method)\n\nAsserts that the object or class target will respond to a method.\n\n    Klass.prototype.bar = function(){};\n    expect(Klass).to.respondTo('bar');\n    expect(obj).to.respondTo('bar');\n\nTo check if a constructor will respond to a static function,\nset the `itself` flag.\n\n    Klass.baz = function(){};\n    expect(Klass).itself.to.respondTo('baz');",
            "name": "respondTo",
            "params": [
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2124,
            "description": "### .itself\n\nSets the `itself` flag, later used by the `respondTo` assertion.\n\n    function Foo() {}\n    Foo.bar = function() {}\n    Foo.prototype.baz = function() {}\n\n    expect(Foo).itself.to.respondTo('bar');\n    expect(Foo).itself.not.to.respondTo('baz');",
            "name": "itself",
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2144,
            "description": "### .satisfy(method)\n\nAsserts that the target passes a given truth test.\n\n    expect(1).to.satisfy(function(num) { return num > 0; });",
            "name": "satisfy",
            "params": [
                {
                    "name": "matcher",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2169,
            "description": "### .closeTo(expected, delta)\n\nAsserts that the target is equal `expected`, to within a +/- `delta` range.\n\n    expect(1.5).to.be.closeTo(1, 0.5);",
            "name": "closeTo",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "delta",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2199,
            "description": "### .members(set)\n\nAsserts that the target is a superset of `set`,\nor that the target and `set` have the same members.\n\n    expect([1, 2, 3]).to.include.members([3, 2]);\n    expect([1, 2, 3]).to.not.include.members([3, 2, 8]);\n\n    expect([4, 2]).to.have.members([2, 4]);\n    expect([5, 2]).to.not.have.members([5, 2, 1]);",
            "name": "members",
            "params": [
                {
                    "name": "set",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2266,
            "description": "### assert(expression, message)\n\nWrite your own test expressions.\n\n    assert('foo' !== 'bar', 'foo is not bar');\n    assert(Array.isArray([]), 'empty arrays are arrays');",
            "params": [
                {
                    "name": "expression",
                    "description": "to test for truthiness",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "to display on error",
                    "type": "String"
                }
            ],
            "name": "assert",
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2289,
            "description": "### .fail(actual, expected, [message], [operator])\n\nThrow a failure. Node.js `assert` module-compatible.",
            "name": "fail",
            "params": [
                {
                    "name": "actual",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "expected",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "operator",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2311,
            "description": "### .ok(object, [message])\n\nAsserts that `object` is truthy.\n\n    assert.ok('everything', 'everything is ok');\n    assert.ok(false, 'this will fail');",
            "name": "ok",
            "params": [
                {
                    "name": "object",
                    "description": "to test",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2329,
            "description": "### .notOk(object, [message])\n\nAsserts that `object` is falsy.\n\n    assert.notOk('everything', 'this will fail');\n    assert.notOk(false, 'this will pass');",
            "name": "notOk",
            "params": [
                {
                    "name": "object",
                    "description": "to test",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2347,
            "description": "### .equal(actual, expected, [message])\n\nAsserts non-strict equality (`==`) of `actual` and `expected`.\n\n    assert.equal(3, '3', '== coerces values to strings');",
            "name": "equal",
            "params": [
                {
                    "name": "actual",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "expected",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2373,
            "description": "### .notEqual(actual, expected, [message])\n\nAsserts non-strict inequality (`!=`) of `actual` and `expected`.\n\n    assert.notEqual(3, 4, 'these numbers are not equal');",
            "name": "notEqual",
            "params": [
                {
                    "name": "actual",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "expected",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2399,
            "description": "### .strictEqual(actual, expected, [message])\n\nAsserts strict equality (`===`) of `actual` and `expected`.\n\n    assert.strictEqual(true, true, 'these booleans are strictly equal');",
            "name": "strictEqual",
            "params": [
                {
                    "name": "actual",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "expected",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2417,
            "description": "### .notStrictEqual(actual, expected, [message])\n\nAsserts strict inequality (`!==`) of `actual` and `expected`.\n\n    assert.notStrictEqual(3, '3', 'no coercion for strict equality');",
            "name": "notStrictEqual",
            "params": [
                {
                    "name": "actual",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "expected",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2435,
            "description": "### .deepEqual(actual, expected, [message])\n\nAsserts that `actual` is deeply equal to `expected`.\n\n    assert.deepEqual({ tea: 'green' }, { tea: 'green' });",
            "name": "deepEqual",
            "params": [
                {
                    "name": "actual",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "expected",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2453,
            "description": "### .notDeepEqual(actual, expected, [message])\n\nAssert that `actual` is not deeply equal to `expected`.\n\n    assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });",
            "name": "notDeepEqual",
            "params": [
                {
                    "name": "actual",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "expected",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2471,
            "description": "### .isTrue(value, [message])\n\nAsserts that `value` is true.\n\n    var teaServed = true;\n    assert.isTrue(teaServed, 'the tea has been served');",
            "name": "isTrue",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2489,
            "description": "### .isFalse(value, [message])\n\nAsserts that `value` is false.\n\n    var teaServed = false;\n    assert.isFalse(teaServed, 'no tea yet? hmm...');",
            "name": "isFalse",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2507,
            "description": "### .isNull(value, [message])\n\nAsserts that `value` is null.\n\n    assert.isNull(err, 'there was no error');",
            "name": "isNull",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2524,
            "description": "### .isNotNull(value, [message])\n\nAsserts that `value` is not null.\n\n    var tea = 'tasty chai';\n    assert.isNotNull(tea, 'great, time for tea!');",
            "name": "isNotNull",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2542,
            "description": "### .isUndefined(value, [message])\n\nAsserts that `value` is `undefined`.\n\n    var tea;\n    assert.isUndefined(tea, 'no tea defined');",
            "name": "isUndefined",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2560,
            "description": "### .isDefined(value, [message])\n\nAsserts that `value` is not `undefined`.\n\n    var tea = 'cup of chai';\n    assert.isDefined(tea, 'tea has been defined');",
            "name": "isDefined",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2578,
            "description": "### .isFunction(value, [message])\n\nAsserts that `value` is a function.\n\n    function serveTea() { return 'cup of tea'; };\n    assert.isFunction(serveTea, 'great, we can have tea now');",
            "name": "isFunction",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2596,
            "description": "### .isNotFunction(value, [message])\n\nAsserts that `value` is _not_ a function.\n\n    var serveTea = [ 'heat', 'pour', 'sip' ];\n    assert.isNotFunction(serveTea, 'great, we have listed the steps');",
            "name": "isNotFunction",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2614,
            "description": "### .isObject(value, [message])\n\nAsserts that `value` is an object (as revealed by\n`Object.prototype.toString`).\n\n    var selection = { name: 'Chai', serve: 'with spices' };\n    assert.isObject(selection, 'tea selection is an object');",
            "name": "isObject",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2633,
            "description": "### .isNotObject(value, [message])\n\nAsserts that `value` is _not_ an object.\n\n    var selection = 'chai'\n    assert.isObject(selection, 'tea selection is not an object');\n    assert.isObject(null, 'null is not an object');",
            "name": "isNotObject",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2652,
            "description": "### .isArray(value, [message])\n\nAsserts that `value` is an array.\n\n    var menu = [ 'green', 'chai', 'oolong' ];\n    assert.isArray(menu, 'what kind of tea do we want?');",
            "name": "isArray",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2670,
            "description": "### .isNotArray(value, [message])\n\nAsserts that `value` is _not_ an array.\n\n    var menu = 'green|chai|oolong';\n    assert.isNotArray(menu, 'what kind of tea do we want?');",
            "name": "isNotArray",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2688,
            "description": "### .isString(value, [message])\n\nAsserts that `value` is a string.\n\n    var teaOrder = 'chai';\n    assert.isString(teaOrder, 'order placed');",
            "name": "isString",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2706,
            "description": "### .isNotString(value, [message])\n\nAsserts that `value` is _not_ a string.\n\n    var teaOrder = 4;\n    assert.isNotString(teaOrder, 'order placed');",
            "name": "isNotString",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2724,
            "description": "### .isNumber(value, [message])\n\nAsserts that `value` is a number.\n\n    var cups = 2;\n    assert.isNumber(cups, 'how many cups');",
            "name": "isNumber",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2742,
            "description": "### .isNotNumber(value, [message])\n\nAsserts that `value` is _not_ a number.\n\n    var cups = '2 cups please';\n    assert.isNotNumber(cups, 'how many cups');",
            "name": "isNotNumber",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2760,
            "description": "### .isBoolean(value, [message])\n\nAsserts that `value` is a boolean.\n\n    var teaReady = true\n      , teaServed = false;\n\n    assert.isBoolean(teaReady, 'is the tea ready');\n    assert.isBoolean(teaServed, 'has tea been served');",
            "name": "isBoolean",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2781,
            "description": "### .isNotBoolean(value, [message])\n\nAsserts that `value` is _not_ a boolean.\n\n    var teaReady = 'yep'\n      , teaServed = 'nope';\n\n    assert.isNotBoolean(teaReady, 'is the tea ready');\n    assert.isNotBoolean(teaServed, 'has tea been served');",
            "name": "isNotBoolean",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2802,
            "description": "### .typeOf(value, name, [message])\n\nAsserts that `value`'s type is `name`, as determined by\n`Object.prototype.toString`.\n\n    assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\n    assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\n    assert.typeOf('tea', 'string', 'we have a string');\n    assert.typeOf(/tea/, 'regexp', 'we have a regular expression');\n    assert.typeOf(null, 'null', 'we have a null');\n    assert.typeOf(undefined, 'undefined', 'we have an undefined');",
            "name": "typeOf",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2826,
            "description": "### .notTypeOf(value, name, [message])\n\nAsserts that `value`'s type is _not_ `name`, as determined by\n`Object.prototype.toString`.\n\n    assert.notTypeOf('tea', 'number', 'strings are not numbers');",
            "name": "notTypeOf",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "typeof",
                    "description": "name",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2845,
            "description": "### .instanceOf(object, constructor, [message])\n\nAsserts that `value` is an instance of `constructor`.\n\n    var Tea = function (name) { this.name = name; }\n      , chai = new Tea('chai');\n\n    assert.instanceOf(chai, Tea, 'chai is an instance of tea');",
            "name": "instanceOf",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "constructor",
                    "description": "",
                    "type": "Constructor"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2866,
            "description": "### .notInstanceOf(object, constructor, [message])\n\nAsserts `value` is not an instance of `constructor`.\n\n    var Tea = function (name) { this.name = name; }\n      , chai = new String('chai');\n\n    assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');",
            "name": "notInstanceOf",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "constructor",
                    "description": "",
                    "type": "Constructor"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2887,
            "description": "### .include(haystack, needle, [message])\n\nAsserts that `haystack` includes `needle`. Works\nfor strings and arrays.\n\n    assert.include('foobar', 'bar', 'foobar contains string \"bar\"');\n    assert.include([ 1, 2, 3 ], 3, 'array contains value');",
            "name": "include",
            "params": [
                {
                    "name": "haystack",
                    "description": "",
                    "type": "Array|String"
                },
                {
                    "name": "needle",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2907,
            "description": "### .notInclude(haystack, needle, [message])\n\nAsserts that `haystack` does not include `needle`. Works\nfor strings and arrays.\ni\n    assert.notInclude('foobar', 'baz', 'string not include substring');\n    assert.notInclude([ 1, 2, 3 ], 4, 'array not include contain value');",
            "name": "notInclude",
            "params": [
                {
                    "name": "haystack",
                    "description": "",
                    "type": "Array|String"
                },
                {
                    "name": "needle",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2927,
            "description": "### .match(value, regexp, [message])\n\nAsserts that `value` matches the regular expression `regexp`.\n\n    assert.match('foobar', /^foo/, 'regexp matches');",
            "name": "match",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "regexp",
                    "description": "",
                    "type": "RegExp"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2945,
            "description": "### .notMatch(value, regexp, [message])\n\nAsserts that `value` does not match the regular expression `regexp`.\n\n    assert.notMatch('foobar', /^foo/, 'regexp does not match');",
            "name": "notMatch",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "regexp",
                    "description": "",
                    "type": "RegExp"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2963,
            "description": "### .property(object, property, [message])\n\nAsserts that `object` has a property named by `property`.\n\n    assert.property({ tea: { green: 'matcha' }}, 'tea');",
            "name": "property",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2981,
            "description": "### .notProperty(object, property, [message])\n\nAsserts that `object` does _not_ have a property named by `property`.\n\n    assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');",
            "name": "notProperty",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 2999,
            "description": "### .deepProperty(object, property, [message])\n\nAsserts that `object` has a property named by `property`, which can be a\nstring using dot- and bracket-notation for deep reference.\n\n    assert.deepProperty({ tea: { green: 'matcha' }}, 'tea.green');",
            "name": "deepProperty",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 3018,
            "description": "### .notDeepProperty(object, property, [message])\n\nAsserts that `object` does _not_ have a property named by `property`, which\ncan be a string using dot- and bracket-notation for deep reference.\n\n    assert.notDeepProperty({ tea: { green: 'matcha' }}, 'tea.oolong');",
            "name": "notDeepProperty",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 3037,
            "description": "### .propertyVal(object, property, value, [message])\n\nAsserts that `object` has a property named by `property` with value given\nby `value`.\n\n    assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');",
            "name": "propertyVal",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 3057,
            "description": "### .propertyNotVal(object, property, value, [message])\n\nAsserts that `object` has a property named by `property`, but with a value\ndifferent from that given by `value`.\n\n    assert.propertyNotVal({ tea: 'is good' }, 'tea', 'is bad');",
            "name": "propertyNotVal",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 3077,
            "description": "### .deepPropertyVal(object, property, value, [message])\n\nAsserts that `object` has a property named by `property` with value given\nby `value`. `property` can use dot- and bracket-notation for deep\nreference.\n\n    assert.deepPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');",
            "name": "deepPropertyVal",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 3098,
            "description": "### .deepPropertyNotVal(object, property, value, [message])\n\nAsserts that `object` has a property named by `property`, but with a value\ndifferent from that given by `value`. `property` can use dot- and\nbracket-notation for deep reference.\n\n    assert.deepPropertyNotVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');",
            "name": "deepPropertyNotVal",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 3119,
            "description": "### .lengthOf(object, length, [message])\n\nAsserts that `object` has a `length` property with the expected value.\n\n    assert.lengthOf([1,2,3], 3, 'array has length of 3');\n    assert.lengthOf('foobar', 5, 'string has length of 6');",
            "name": "lengthOf",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "length",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 3138,
            "description": "### .throws(function, [constructor/string/regexp], [string/regexp], [message])\n\nAsserts that `function` will throw an error that is an instance of\n`constructor`, or alternately that it will throw an error with message\nmatching `regexp`.\n\n    assert.throw(fn, 'function throws a reference error');\n    assert.throw(fn, /function throws a reference error/);\n    assert.throw(fn, ReferenceError);\n    assert.throw(fn, ReferenceError, 'function throws a reference error');\n    assert.throw(fn, ReferenceError, /function throws a reference error/);",
            "name": "throws",
            "alias": "Throw",
            "params": [
                {
                    "name": "function",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "constructor",
                    "description": "",
                    "type": "ErrorConstructor"
                },
                {
                    "name": "regexp",
                    "description": "",
                    "type": "RegExp"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "see": [
                "https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types"
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 3172,
            "description": "### .doesNotThrow(function, [constructor/regexp], [message])\n\nAsserts that `function` will _not_ throw an error that is an instance of\n`constructor`, or alternately that it will not throw an error with message\nmatching `regexp`.\n\n    assert.doesNotThrow(fn, Error, 'function does not throw');",
            "name": "doesNotThrow",
            "params": [
                {
                    "name": "function",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "constructor",
                    "description": "",
                    "type": "ErrorConstructor"
                },
                {
                    "name": "regexp",
                    "description": "",
                    "type": "RegExp"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "see": [
                "https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types"
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 3199,
            "description": "### .operator(val1, operator, val2, [message])\n\nCompares two values using `operator`.\n\n    assert.operator(1, '<', 2, 'everything is ok');\n    assert.operator(1, '>', 2, 'this will fail');",
            "name": "operator",
            "params": [
                {
                    "name": "val1",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "operator",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "val2",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 3226,
            "description": "### .closeTo(actual, expected, delta, [message])\n\nAsserts that the target is equal `expected`, to within a +/- `delta` range.\n\n    assert.closeTo(1.5, 1, 0.5, 'numbers are close');",
            "name": "closeTo",
            "params": [
                {
                    "name": "actual",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "expected",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "delta",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 3245,
            "description": "### .sameMembers(set1, set2, [message])\n\nAsserts that `set1` and `set2` have the same members.\nOrder is not taken into account.\n\n    assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');",
            "name": "sameMembers",
            "params": [
                {
                    "name": "superset",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "subset",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 3264,
            "description": "### .includeMembers(superset, subset, [message])\n\nAsserts that `subset` is included in `superset`.\nOrder is not taken into account.\n\n    assert.includeMembers([ 1, 2, 3 ], [ 2, 1 ], 'include members');",
            "name": "includeMembers",
            "params": [
                {
                    "name": "superset",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "subset",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 3427,
            "description": "### addChainableMethod (ctx, name, method, chainingBehavior)\n\nAdds a method to an object, such that the method can also be chained.\n\n    utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n      var obj = utils.flag(this, 'object');\n      new chai.Assertion(obj).to.be.equal(str);\n    });\n\nCan also be accessed directly from `chai.Assertion`.\n\n    chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n\nThe result can then be used as both a method assertion, executing both `method` and\n`chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n\n    expect(fooStr).to.be.foo('bar');\n    expect(fooStr).to.be.foo.equal('foo');",
            "params": [
                {
                    "name": "ctx",
                    "description": "object to which the method is added",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "of method to add",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "function to be used for `name`, when called",
                    "type": "Function"
                },
                {
                    "name": "chainingBehavior",
                    "description": "function to be called every time the property is accessed",
                    "type": "Function"
                }
            ],
            "name": "addChainableMethod",
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 3514,
            "description": "### .addMethod (ctx, name, method)\n\nAdds a method to the prototype of an object.\n\n    utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {\n      var obj = utils.flag(this, 'object');\n      new chai.Assertion(obj).to.be.equal(str);\n    });\n\nCan also be accessed directly from `chai.Assertion`.\n\n    chai.Assertion.addMethod('foo', fn);\n\nThen can be used as any other assertion.\n\n    expect(fooStr).to.be.foo('bar');",
            "params": [
                {
                    "name": "ctx",
                    "description": "object to which the method is added",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "of method to add",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "function to be used for name",
                    "type": "Function"
                }
            ],
            "name": "addMethod",
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 3554,
            "description": "### addProperty (ctx, name, getter)\n\nAdds a property to the prototype of an object.\n\n    utils.addProperty(chai.Assertion.prototype, 'foo', function () {\n      var obj = utils.flag(this, 'object');\n      new chai.Assertion(obj).to.be.instanceof(Foo);\n    });\n\nCan also be accessed directly from `chai.Assertion`.\n\n    chai.Assertion.addProperty('foo', fn);\n\nThen can be used as any other assertion.\n\n    expect(myFoo).to.be.foo;",
            "params": [
                {
                    "name": "ctx",
                    "description": "object to which the property is added",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "of property to add",
                    "type": "String"
                },
                {
                    "name": "getter",
                    "description": "function to be used for name",
                    "type": "Function"
                }
            ],
            "name": "addProperty",
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 3597,
            "description": "### flag(object ,key, [value])\n\nGet or set a flag value on an object. If a\nvalue is provided it will be set, else it will\nreturn the currently set value or `undefined` if\nthe value is not set.\n\n    utils.flag(this, 'foo', 'bar'); // setter\n    utils.flag(this, 'foo'); // getter, returns `bar`",
            "params": [
                {
                    "name": "object",
                    "description": "(constructed Assertion",
                    "type": "Object"
                },
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "(optional)",
                    "type": "Mixed"
                }
            ],
            "name": "flag",
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 3632,
            "description": "# getActual(object, [actual])\n\nReturns the `actual` value for an Assertion",
            "params": [
                {
                    "name": "object",
                    "description": "(constructed Assertion)",
                    "type": "Object"
                },
                {
                    "name": "chai.Assertion.prototype.assert",
                    "description": "arguments",
                    "type": "Arguments"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 3654,
            "description": "### .getEnumerableProperties(object)\n\nThis allows the retrieval of enumerable property names of an object,\ninherited or not.",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "name": "getEnumerableProperties",
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 3691,
            "description": "### .getMessage(object, message, negateMessage)\n\nConstruct the error message based on flags\nand template tags. Template tags will return\na stringified inspection of the object referenced.\n\nMessage template tags:\n- `#{this}` current asserted object\n- `#{act}` actual value\n- `#{exp}` expected value",
            "params": [
                {
                    "name": "object",
                    "description": "(constructed Assertion)",
                    "type": "Object"
                },
                {
                    "name": "chai.Assertion.prototype.assert",
                    "description": "arguments",
                    "type": "Arguments"
                }
            ],
            "name": "getMessage",
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 3734,
            "description": "# getName(func)\n\nGets the name of a function, in a cross-browser way.",
            "params": [
                {
                    "name": "a",
                    "description": "function (usually a constructor)",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 3758,
            "description": "### .getPathValue(path, object)\n\nThis allows the retrieval of values in an\nobject given a string path.\n\n    var obj = {\n        prop1: {\n            arr: ['a', 'b', 'c']\n          , str: 'Hello'\n        }\n      , prop2: {\n            arr: [ { nested: 'Universe' } ]\n          , str: 'Hello again!'\n        }\n    }\n\nThe following would be the results.\n\n    getPathValue('prop1.str', obj); // Hello\n    getPathValue('prop1.att[2]', obj); // b\n    getPathValue('prop2.arr[0].nested', obj); // Universe",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "value or `undefined`",
                "type": "Object"
            },
            "name": "getPathValue",
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 3862,
            "description": "### .getProperties(object)\n\nThis allows the retrieval of property names of an object, enumerable or not,\ninherited or not.",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "name": "getProperties",
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 4020,
            "description": "Echos the value of a value. Trys to print the value out\nin the best way possible given the different types.",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to print out.",
                    "type": "Object"
                },
                {
                    "name": "showHidden",
                    "description": "Flag that shows hidden (not enumerable)\n   properties of objects.",
                    "type": "Boolean"
                },
                {
                    "name": "depth",
                    "description": "Depth in which to descend in object. Default is 2.",
                    "type": "Number"
                },
                {
                    "name": "colors",
                    "description": "Flag to turn on ANSI escape codes to color the\n   output. Default is false (no coloring).",
                    "type": "Boolean"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 4346,
            "description": "### .objDisplay (object)\n\nDetermines if an object or an array matches\ncriteria to be inspected in-line for error\nmessages or should be truncated.",
            "params": [
                {
                    "name": "javascript",
                    "description": "object to inspect",
                    "type": "Mixed"
                }
            ],
            "name": "objDisplay",
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 4391,
            "description": "### overwriteMethod (ctx, name, fn)\n\nOverwites an already existing method and provides\naccess to previous function. Must return function\nto be used for name.\n\n    utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\n      return function (str) {\n        var obj = utils.flag(this, 'object');\n        if (obj instanceof Foo) {\n          new chai.Assertion(obj.value).to.equal(str);\n        } else {\n          _super.apply(this, arguments);\n        }\n      }\n    });\n\nCan also be accessed directly from `chai.Assertion`.\n\n    chai.Assertion.overwriteMethod('foo', fn);\n\nThen can be used as any other assertion.\n\n    expect(myFoo).to.equal('bar');",
            "params": [
                {
                    "name": "ctx",
                    "description": "object whose method is to be overwritten",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "of method to overwrite",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "function that returns a function to be used for name",
                    "type": "Function"
                }
            ],
            "name": "overwriteMethod",
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 4445,
            "description": "### overwriteProperty (ctx, name, fn)\n\nOverwites an already existing property getter and provides\naccess to previous value. Must return function to use as getter.\n\n    utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n      return function () {\n        var obj = utils.flag(this, 'object');\n        if (obj instanceof Foo) {\n          new chai.Assertion(obj.name).to.equal('bar');\n        } else {\n          _super.call(this);\n        }\n      }\n    });\n\n\nCan also be accessed directly from `chai.Assertion`.\n\n    chai.Assertion.overwriteProperty('foo', fn);\n\nThen can be used as any other assertion.\n\n    expect(myFoo).to.be.ok;",
            "params": [
                {
                    "name": "ctx",
                    "description": "object whose property is to be overwritten",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "of property to overwrite",
                    "type": "String"
                },
                {
                    "name": "getter",
                    "description": "function that returns a getter function to be used for name",
                    "type": "Function"
                }
            ],
            "name": "overwriteProperty",
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 4502,
            "description": "### overwriteChainableMethod (ctx, name, fn)\n\nOverwites an already existing chainable method\nand provides access to the previous function or\nproperty.  Must return functions to be used for\nname.\n\n    utils.overwriteChainableMethod(chai.Assertion.prototype, 'length',\n      function (_super) {\n      }\n    , function (_super) {\n      }\n    );\n\nCan also be accessed directly from `chai.Assertion`.\n\n    chai.Assertion.overwriteChainableMethod('foo', fn, fn);\n\nThen can be used as any other assertion.\n\n    expect(myFoo).to.have.length(3);\n    expect(myFoo).to.have.length.above(3);",
            "params": [
                {
                    "name": "ctx",
                    "description": "object whose method / property is to be overwritten",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "of method / property to overwrite",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "function that returns a function to be used for name",
                    "type": "Function"
                },
                {
                    "name": "chainingBehavior",
                    "description": "function that returns a function to be used for property",
                    "type": "Function"
                }
            ],
            "name": "overwriteChainableMethod",
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 4564,
            "description": "# test(object, expression)\n\nTest and object for expression.",
            "params": [
                {
                    "name": "object",
                    "description": "(constructed Assertion)",
                    "type": "Object"
                },
                {
                    "name": "chai.Assertion.prototype.assert",
                    "description": "arguments",
                    "type": "Arguments"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 4587,
            "description": "### transferFlags(assertion, object, includeAll = true)\n\nTransfer all the flags for `assertion` to `object`. If\n`includeAll` is set to `false`, then the base Chai\nassertion flags (namely `object`, `ssfi`, and `message`)\nwill not be transferred.\n\n\n    var newAssertion = new Assertion();\n    utils.transferFlags(assertion, newAssertion);\n\n    var anotherAsseriton = new Assertion(myObj);\n    utils.transferFlags(assertion, anotherAssertion, false);",
            "params": [
                {
                    "name": "assertion",
                    "description": "the assertion to transfer the flags from",
                    "type": "Assertion"
                },
                {
                    "name": "object",
                    "description": "the object to transfer the flags too; usually a new assertion",
                    "type": "Object"
                },
                {
                    "name": "includeAll",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "name": "getAllFlags",
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\chai.js",
            "line": 4648,
            "description": "### type(object)\n\nBetter implementation of `typeof` detection that can\nbe used cross-browser. Handles the inconsistencies of\nArray, `null`, and `undefined` detection.\n\n    utils.type({}) // 'object'\n    utils.type(null) // `null'\n    utils.type(undefined) // `undefined`\n    utils.type([]) // `array`",
            "params": [
                {
                    "name": "object",
                    "description": "to detect type of",
                    "type": "Mixed"
                }
            ],
            "name": "type",
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 419,
            "description": "Module exports.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 425,
            "description": "Check if `obj` is an array.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 433,
            "description": "Event emitter constructor.",
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 441,
            "description": "Adds a listener.",
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 465,
            "description": "Adds a volatile listener.",
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 485,
            "description": "Removes a listener.",
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 522,
            "description": "Removes all listeners for an event.",
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 541,
            "description": "Gets all listeners for a certain event.",
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 563,
            "description": "Emits an event.",
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 607,
            "description": "Expose `Progress`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 613,
            "description": "Initialize a new `Progress` indicator.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 624,
            "description": "Set progress size to `n`.",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "for chaining",
                "type": "Progress"
            },
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 637,
            "description": "Set text to `str`.",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "for chaining",
                "type": "Progress"
            },
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 650,
            "description": "Set font size to `n`.",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "for chaining",
                "type": "Progress"
            },
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 663,
            "description": "Set font `family`.",
            "params": [
                {
                    "name": "family",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "for chaining",
                "type": "Progress"
            },
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 675,
            "description": "Update percentage to `n`.",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "for chaining",
                "type": "Progress"
            },
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 687,
            "description": "Draw on `ctx`.",
            "params": [
                {
                    "name": "ctx",
                    "description": "",
                    "type": "CanvasRenderingContext2d"
                }
            ],
            "return": {
                "description": "for chaining",
                "type": "Progress"
            },
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 754,
            "description": "Expose `Context`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 760,
            "description": "Initialize a new `Context`.",
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 768,
            "description": "Set or get the context `Runnable` to `runnable`.",
            "params": [
                {
                    "name": "runnable",
                    "description": "",
                    "type": "Runnable"
                }
            ],
            "return": {
                "description": "",
                "type": "Context"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 782,
            "description": "Set test timeout `ms`.",
            "params": [
                {
                    "name": "ms",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "self",
                "type": "Context"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 795,
            "description": "Set test slowness threshold `ms`.",
            "params": [
                {
                    "name": "ms",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "self",
                "type": "Context"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 808,
            "description": "Inspect the context void of `._runnable`.",
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 827,
            "description": "Module dependencies.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 833,
            "description": "Expose `Hook`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 839,
            "description": "Initialize a new `Hook` with the given `title` and callback `fn`.",
            "params": [
                {
                    "name": "title",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 852,
            "description": "Inherit from `Runnable.prototype`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 862,
            "description": "Get or set the test `err`.",
            "params": [
                {
                    "name": "err",
                    "description": "",
                    "type": "Error"
                }
            ],
            "return": {
                "description": "",
                "type": "Error"
            },
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 884,
            "description": "Module dependencies.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 892,
            "description": "BDD-style interface:\n\n     describe('Array', function(){\n       describe('#indexOf()', function(){\n         it('should return -1 when not present', function(){\n\n         });\n\n         it('should return the index when present', function(){\n\n         });\n       });\n     });",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 914,
            "description": "Execute before running tests.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 922,
            "description": "Execute after running tests.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 930,
            "description": "Execute before each test case.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 938,
            "description": "Execute after each test case.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 946,
            "description": "Describe a \"suite\" with the given `title`\nand callback `fn` containing nested suites\nand/or tests.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 960,
            "description": "Pending describe.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 974,
            "description": "Exclusive suite.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 984,
            "description": "Describe a specification or test-case\nwith the given `title` and callback `fn`\nacting as a thunk.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 998,
            "description": "Exclusive test-case.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1009,
            "description": "Pending test case.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1025,
            "description": "Module dependencies.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1032,
            "description": "TDD-style interface:\n\n    exports.Array = {\n      '#indexOf()': {\n        'should return -1 when the value is not present': function(){\n\n        },\n\n        'should return the correct index when the value is present': function(){\n\n        }\n      }\n    };",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1098,
            "description": "Module dependencies.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1106,
            "description": "QUnit-style interface:\n\n    suite('Array');\n\n    test('#length', function(){\n      var arr = [1,2,3];\n      ok(arr.length == 3);\n    });\n\n    test('#indexOf()', function(){\n      var arr = [1,2,3];\n      ok(arr.indexOf(1) == 0);\n      ok(arr.indexOf(2) == 1);\n      ok(arr.indexOf(3) == 2);\n    });\n\n    suite('String');\n\n    test('#length', function(){\n      ok('foo'.length == 3);\n    });",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1136,
            "description": "Execute before running tests.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1144,
            "description": "Execute after running tests.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1152,
            "description": "Execute before each test case.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1160,
            "description": "Execute after each test case.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1168,
            "description": "Describe a \"suite\" with the given `title`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1179,
            "description": "Exclusive test-case.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1188,
            "description": "Describe a specification or test-case\nwith the given `title` and callback `fn`\nacting as a thunk.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1200,
            "description": "Exclusive test-case.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1210,
            "description": "Pending test case.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1224,
            "description": "Module dependencies.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1232,
            "description": "TDD-style interface:\n\n     suite('Array', function(){\n       suite('#indexOf()', function(){\n         suiteSetup(function(){\n\n         });\n\n         test('should return -1 when not present', function(){\n\n         });\n\n         test('should return the index when present', function(){\n\n         });\n\n         suiteTeardown(function(){\n\n         });\n       });\n     });",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1262,
            "description": "Execute before each test case.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1270,
            "description": "Execute after each test case.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1278,
            "description": "Execute before the suite.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1286,
            "description": "Execute after the suite.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1294,
            "description": "Describe a \"suite\" with the given `title`\nand callback `fn` containing nested suites\nand/or tests.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1308,
            "description": "Pending suite.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1319,
            "description": "Exclusive test-case.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1328,
            "description": "Describe a specification or test-case\nwith the given `title` and callback `fn`\nacting as a thunk.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1342,
            "description": "Exclusive test-case.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1352,
            "description": "Pending test case.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1371,
            "description": "Module dependencies.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1378,
            "description": "Expose `Mocha`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1384,
            "description": "Expose internals.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1398,
            "description": "Return image `name` path.",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1410,
            "description": "Setup mocha with `options`.\n\nOptions:\n\n  - `ui` name \"bdd\", \"tdd\", \"exports\" etc\n  - `reporter` reporter instance, defaults to `mocha.reporters.Dot`\n  - `globals` array of accepted globals\n  - `timeout` timeout in milliseconds\n  - `bail` bail on the first test failure\n  - `slow` milliseconds to wait before considering a test slow\n  - `ignoreLeaks` ignore global leaks\n  - `grep` string or regexp to filter tests with",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1457,
            "description": "Enable or disable bailing on the first failure.",
            "params": [
                {
                    "name": "bail",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1470,
            "description": "Add test `file`.",
            "params": [
                {
                    "name": "file",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1482,
            "description": "Set reporter to `reporter`, defaults to \"dot\".",
            "params": [
                {
                    "name": "reporter",
                    "description": "name or constructor",
                    "type": "String|Function"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1507,
            "description": "Set test UI `name`, defaults to \"bdd\".",
            "params": [
                {
                    "name": "bdd",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1523,
            "description": "Load registered files.",
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1542,
            "description": "Enable growl support.",
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1566,
            "description": "Add regexp to grep, if `re` is a string it is escaped.",
            "params": [
                {
                    "name": "re",
                    "description": "",
                    "type": "RegExp|String"
                }
            ],
            "return": {
                "description": "",
                "type": "Mocha"
            },
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1581,
            "description": "Invert `.grep()` matches.",
            "return": {
                "description": "",
                "type": "Mocha"
            },
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1593,
            "description": "Ignore global leaks.",
            "params": [
                {
                    "name": "ignore",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Mocha"
            },
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1606,
            "description": "Enable global leak checking.",
            "return": {
                "description": "",
                "type": "Mocha"
            },
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1618,
            "description": "Enable growl support.",
            "return": {
                "description": "",
                "type": "Mocha"
            },
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1630,
            "description": "Ignore `globals` array or string.",
            "params": [
                {
                    "name": "globals",
                    "description": "",
                    "type": "Array|String"
                }
            ],
            "return": {
                "description": "",
                "type": "Mocha"
            },
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1643,
            "description": "Emit color output.",
            "params": [
                {
                    "name": "colors",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Mocha"
            },
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1658,
            "description": "Use inline diffs rather than +/-.",
            "params": [
                {
                    "name": "inlineDiffs",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Mocha"
            },
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1673,
            "description": "Set the timeout in milliseconds.",
            "params": [
                {
                    "name": "timeout",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Mocha"
            },
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1686,
            "description": "Set slowness threshold in milliseconds.",
            "params": [
                {
                    "name": "slow",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Mocha"
            },
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1699,
            "description": "Makes all tests async (accepting a callback)",
            "return": {
                "description": "",
                "type": "Mocha"
            },
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1711,
            "description": "Run tests and invoke `fn()` when complete.",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Runner"
            },
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1738,
            "description": "Helpers.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1748,
            "description": "Parse or format the given `val`.\n\nOptions:\n\n - `long` verbose formatting [false]",
            "params": [
                {
                    "name": "val",
                    "description": "",
                    "type": "String|Number"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String|Number"
            },
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1767,
            "description": "Parse the given `str` and return milliseconds.",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1806,
            "description": "Short format for `ms`.",
            "params": [
                {
                    "name": "ms",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1822,
            "description": "Long format for `ms`.",
            "params": [
                {
                    "name": "ms",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1838,
            "description": "Pluralization helper.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1852,
            "description": "Module dependencies.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1861,
            "description": "Save timer references to avoid Sinon interfering (see GH-237).",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1871,
            "description": "Check if both stdio streams are associated with a tty.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1877,
            "description": "Expose `Base`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1883,
            "description": "Enable coloring by default.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1889,
            "description": "Inline diffs instead of +/-",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1895,
            "description": "Default color map.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1921,
            "description": "Default symbol map.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1938,
            "description": "Color `str` with the given `type`,\nallowing colors to be disabled,\nas well as user-defined color\nschemes.",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1955,
            "description": "Expose term window size, with some\ndefaults for when stderr is not a tty.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 1968,
            "description": "Expose some basic cursor interactions\nthat are common among reporters.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2000,
            "description": "Outut the given `failures` as a list.",
            "params": [
                {
                    "name": "failures",
                    "description": "",
                    "type": "Array"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2058,
            "description": "Initialize a new `Base` reporter.\n\nAll other reporters generally\ninherit from this reporter, providing\nstats such as test duration, number\nof tests passed / failed etc.",
            "params": [
                {
                    "name": "runner",
                    "description": "",
                    "type": "Runner"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2124,
            "description": "Output common epilogue used by many of\nthe bundled reporters.",
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2169,
            "description": "Pad the given `str` to `len`.",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "len",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2184,
            "description": "Returns an inline diff between 2 strings with coloured ANSI output",
            "params": [
                {
                    "name": "Error",
                    "description": "with actual/expected",
                    "type": "Error"
                }
            ],
            "return": {
                "description": "Diff",
                "type": "String"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2218,
            "description": "Returns a unified diff between 2 strings",
            "params": [
                {
                    "name": "Error",
                    "description": "with actual/expected",
                    "type": "Error"
                }
            ],
            "return": {
                "description": "Diff",
                "type": "String"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2250,
            "description": "Return a character diff for `err`.",
            "params": [
                {
                    "name": "err",
                    "description": "",
                    "type": "Error"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2268,
            "description": "Returns a string with all invisible characters in plain text",
            "params": [
                {
                    "name": "line",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2281,
            "description": "Color lines for `str`, using the color `name`.",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2296,
            "description": "Stringify `obj`.",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2309,
            "description": "Return a new object that has the keys in sorted order.",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2343,
            "description": "Check that a / b have the same type.",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2363,
            "description": "Module dependencies.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2370,
            "description": "Expose `Doc`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2376,
            "description": "Initialize a new `Doc` reporter.",
            "params": [
                {
                    "name": "runner",
                    "description": "",
                    "type": "Runner"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2423,
            "description": "Module dependencies.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2430,
            "description": "Expose `Dot`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2436,
            "description": "Initialize a new `Dot` matrix test reporter.",
            "params": [
                {
                    "name": "runner",
                    "description": "",
                    "type": "Runner"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2479,
            "description": "Inherit from `Base.prototype`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2492,
            "description": "Module dependencies.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2499,
            "description": "Expose `HTMLCov`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2505,
            "description": "Initialize a new `JsCoverage` reporter.",
            "params": [
                {
                    "name": "runner",
                    "description": "",
                    "type": "Runner"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2529,
            "description": "Return coverage class for `n`.",
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2546,
            "description": "Module dependencies.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2555,
            "description": "Save timer references to avoid Sinon interfering (see GH-237).",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2565,
            "description": "Expose `HTML`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2571,
            "description": "Stats template.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2582,
            "description": "Initialize a new `HTML` reporter.",
            "params": [
                {
                    "name": "runner",
                    "description": "",
                    "type": "Runner"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2725,
            "description": "Provide suite URL",
            "params": [
                {
                    "name": "suite",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2735,
            "description": "Provide test URL",
            "params": [
                {
                    "name": "test",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2745,
            "description": "Display error `msg`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2753,
            "description": "Return a DOM fragment from `html`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2772,
            "description": "Check for suites that do not have elements\nwith `classname`, and hide them.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2785,
            "description": "Unhide .hidden suites.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2796,
            "description": "Set `el` text to `str`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2808,
            "description": "Listen on `event` with callback `fn`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2846,
            "description": "Module dependencies.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2852,
            "description": "Expose `JSONCov`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2858,
            "description": "Initialize a new `JsCoverage` reporter.",
            "params": [
                {
                    "name": "runner",
                    "description": "",
                    "type": "Runner"
                },
                {
                    "name": "output",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2900,
            "description": "Map jscoverage data to a JSON structure\nsuitable for reporting.",
            "params": [
                {
                    "name": "cov",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2938,
            "description": "Map jscoverage data for a single source file\nto a JSON structure suitable for reporting.",
            "params": [
                {
                    "name": "filename",
                    "description": "name of the source file",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "jscoverage coverage data",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 2982,
            "description": "Return a plain-object representation of `test`\nfree of cyclic properties etc.",
            "params": [
                {
                    "name": "test",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3003,
            "description": "Module dependencies.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3010,
            "description": "Expose `List`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3016,
            "description": "Initialize a new `List` test reporter.",
            "params": [
                {
                    "name": "runner",
                    "description": "",
                    "type": "Runner"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3047,
            "description": "Return a plain-object representation of `test`\nfree of cyclic properties etc.",
            "params": [
                {
                    "name": "test",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3067,
            "description": "Module dependencies.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3075,
            "description": "Expose `JSON`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3081,
            "description": "Initialize a new `JSON` reporter.",
            "params": [
                {
                    "name": "runner",
                    "description": "",
                    "type": "Runner"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3120,
            "description": "Return a plain-object representation of `test`\nfree of cyclic properties etc.",
            "params": [
                {
                    "name": "test",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3140,
            "description": "Module dependencies.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3148,
            "description": "Expose `Landing`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3154,
            "description": "Airplane color.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3160,
            "description": "Airplane crash color.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3166,
            "description": "Runway color.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3172,
            "description": "Initialize a new `Landing` reporter.",
            "params": [
                {
                    "name": "runner",
                    "description": "",
                    "type": "Runner"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3231,
            "description": "Inherit from `Base.prototype`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3244,
            "description": "Module dependencies.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3252,
            "description": "Expose `List`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3258,
            "description": "Initialize a new `List` test reporter.",
            "params": [
                {
                    "name": "runner",
                    "description": "",
                    "type": "Runner"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3302,
            "description": "Inherit from `Base.prototype`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3315,
            "description": "Module dependencies.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3322,
            "description": "Expose `Markdown`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3328,
            "description": "Initialize a new `Markdown` reporter.",
            "params": [
                {
                    "name": "runner",
                    "description": "",
                    "type": "Runner"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3410,
            "description": "Module dependencies.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3416,
            "description": "Expose `Min`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3422,
            "description": "Initialize a new `Min` minimal test reporter (best used with --watch).",
            "params": [
                {
                    "name": "runner",
                    "description": "",
                    "type": "Runner"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3442,
            "description": "Inherit from `Base.prototype`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3455,
            "description": "Module dependencies.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3462,
            "description": "Expose `Dot`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3468,
            "description": "Initialize a new `Dot` matrix test reporter.",
            "params": [
                {
                    "name": "runner",
                    "description": "",
                    "type": "Runner"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3514,
            "description": "Draw the nyan cat",
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3528,
            "description": "Draw the \"scoreboard\" showing the number\nof passes, failures and pending tests.",
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3553,
            "description": "Append the rainbow.",
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3570,
            "description": "Draw the rainbow.",
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3588,
            "description": "Draw the nyan cat",
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3624,
            "description": "Draw nyan cat face.",
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3644,
            "description": "Move cursor up `n`.",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                }
            ],
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3655,
            "description": "Move cursor down `n`.",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                }
            ],
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3666,
            "description": "Generate rainbow colors.",
            "return": {
                "description": "",
                "type": "Array"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3688,
            "description": "Apply rainbow to the given `str`.",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3702,
            "description": "Stdout helper.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3710,
            "description": "Inherit from `Base.prototype`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3724,
            "description": "Module dependencies.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3732,
            "description": "Expose `Progress`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3738,
            "description": "General progress bar color.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3744,
            "description": "Initialize a new `Progress` bar test reporter.",
            "params": [
                {
                    "name": "runner",
                    "description": "",
                    "type": "Runner"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3804,
            "description": "Inherit from `Base.prototype`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3818,
            "description": "Module dependencies.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3826,
            "description": "Expose `Spec`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3832,
            "description": "Initialize a new `Spec` test reporter.",
            "params": [
                {
                    "name": "runner",
                    "description": "",
                    "type": "Runner"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3895,
            "description": "Inherit from `Base.prototype`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3909,
            "description": "Module dependencies.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3917,
            "description": "Expose `TAP`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3923,
            "description": "Initialize a new `TAP` reporter.",
            "params": [
                {
                    "name": "runner",
                    "description": "",
                    "type": "Runner"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3970,
            "description": "Return a TAP-safe title of `test`",
            "params": [
                {
                    "name": "test",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3986,
            "description": "Module dependencies.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 3994,
            "description": "Save timer references to avoid Sinon interfering (see GH-237).",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4004,
            "description": "Expose `XUnit`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4010,
            "description": "Initialize a new `XUnit` reporter.",
            "params": [
                {
                    "name": "runner",
                    "description": "",
                    "type": "Runner"
                }
            ],
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4051,
            "description": "Inherit from `Base.prototype`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4061,
            "description": "Output tag for the given `test.`",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4083,
            "description": "HTML tag helper.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4101,
            "description": "Return cdata escaped CDATA `str`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4113,
            "description": "Module dependencies.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4121,
            "description": "Save timer references to avoid Sinon interfering (see GH-237).",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4131,
            "description": "Object#toString().",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4137,
            "description": "Expose `Runnable`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4143,
            "description": "Initialize a new `Runnable` with the given `title` and callback `fn`.",
            "params": [
                {
                    "name": "title",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4161,
            "description": "Inherit from `EventEmitter.prototype`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4171,
            "description": "Set & get timeout `ms`.",
            "params": [
                {
                    "name": "ms",
                    "description": "",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "ms or self",
                "type": "Runnable|Number"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4188,
            "description": "Set & get slow `ms`.",
            "params": [
                {
                    "name": "ms",
                    "description": "",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "ms or self",
                "type": "Runnable|Number"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4204,
            "description": "Return the full title generated by recursively\nconcatenating the parent's full title.",
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4216,
            "description": "Clear the timeout.",
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4226,
            "description": "Inspect the runnable void of private properties.",
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4242,
            "description": "Reset the timeout.",
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4259,
            "description": "Whitelist these globals for this test run",
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4269,
            "description": "Run the test and invoke `fn(err)`.",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4347,
            "description": "Module dependencies.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4358,
            "description": "Non-enumerable globals.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4371,
            "description": "Expose `Runner`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4377,
            "description": "Initialize a `Runner` for the given `suite`.\n\nEvents:\n\n  - `start`  execution started\n  - `end`  execution complete\n  - `suite`  (suite) test suite execution started\n  - `suite end`  (suite) all tests (and sub-suites) have finished\n  - `test`  (test) test execution started\n  - `test end`  (test) test completed\n  - `hook`  (hook) hook execution started\n  - `hook end`  (hook) hook complete\n  - `pass`  (test) test passed\n  - `fail`  (test, err) test failed\n  - `pending`  (test) test pending",
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4410,
            "description": "Wrapper for setImmediate, process.nextTick, or browser polyfill.",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4419,
            "description": "Inherit from `EventEmitter.prototype`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4429,
            "description": "Run tests with full titles matching `re`. Updates runner.total\nwith number of tests matched.",
            "params": [
                {
                    "name": "re",
                    "description": "",
                    "type": "RegExp"
                },
                {
                    "name": "invert",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "for chaining",
                "type": "Runner"
            },
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4447,
            "description": "Returns the number of tests matching the grep search for the\ngiven suite.",
            "params": [
                {
                    "name": "suite",
                    "description": "",
                    "type": "Suite"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4469,
            "description": "Return a list of global properties.",
            "return": {
                "description": "",
                "type": "Array"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4488,
            "description": "Allow the given `arr` of globals.",
            "params": [
                {
                    "name": "arr",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "for chaining",
                "type": "Runner"
            },
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4503,
            "description": "Check for global variable leaks.",
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4534,
            "description": "Fail the given `test`.",
            "params": [
                {
                    "name": "test",
                    "description": "",
                    "type": "Test"
                },
                {
                    "name": "err",
                    "description": "",
                    "type": "Error"
                }
            ],
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4553,
            "description": "Fail the given `hook` with `err`.\n\nHook failures work in the following pattern:\n- If bail, then exit\n- Failed `before` hook skips all tests in a suite and subsuites,\n  but jumps to corresponding `after` hook\n- Failed `before each` hook skips remaining tests in a\n  suite and jumps to corresponding `after each` hook,\n  which is run only once\n- Failed `after` hook does not alter\n  execution order\n- Failed `after each` hook skips remaining tests in a\n  suite and subsuites, but executes other `after each`\n  hooks",
            "params": [
                {
                    "name": "hook",
                    "description": "",
                    "type": "Hook"
                },
                {
                    "name": "err",
                    "description": "",
                    "type": "Error"
                }
            ],
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4581,
            "description": "Run hook `name` callbacks and then invoke `fn()`.",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "function",
                    "description": "",
                    "type": "Function"
                }
            ],
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4630,
            "description": "Run hook `name` for the given array of `suites`\nin order, and callback `fn(err, errSuite)`.",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "suites",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4666,
            "description": "Run hooks from the top level down.",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4679,
            "description": "Run hooks from the bottom up.",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4692,
            "description": "Return an array of parent Suites from\nclosest to furthest.",
            "return": {
                "description": "",
                "type": "Array"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4707,
            "description": "Run the current test and callback `fn(err)`.",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4730,
            "description": "Run tests in the given `suite` and invoke\nthe callback `fn()` when complete.",
            "params": [
                {
                    "name": "suite",
                    "description": "",
                    "type": "Suite"
                },
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4823,
            "description": "Run the given `suite` and invoke the\ncallback `fn()` when complete.",
            "params": [
                {
                    "name": "suite",
                    "description": "",
                    "type": "Suite"
                },
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4878,
            "description": "Handle uncaught exceptions.",
            "params": [
                {
                    "name": "err",
                    "description": "",
                    "type": "Error"
                }
            ],
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4904,
            "description": "Run the root suite and invoke `fn(failures)`\non completion.",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "for chaining",
                "type": "Runner"
            },
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4943,
            "description": "Cleanly abort execution",
            "return": {
                "description": "for chaining",
                "type": "Runner"
            },
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4954,
            "description": "Filter leaks with the given globals flagged as `ok`.",
            "params": [
                {
                    "name": "ok",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "globals",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 4988,
            "description": "Array of globals dependent on the environment.",
            "return": {
                "description": "",
                "type": "Array"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5017,
            "description": "Module dependencies.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5027,
            "description": "Expose `Suite`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5033,
            "description": "Create a new `Suite` with the given `title`\nand parent `Suite`. When a suite with the\nsame title is already present, that suite\nis returned to provide nicer reporter\nand more flexible meta-testing.",
            "params": [
                {
                    "name": "parent",
                    "description": "",
                    "type": "Suite"
                },
                {
                    "name": "title",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Suite"
            },
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5055,
            "description": "Initialize a new `Suite` with the given\n`title` and `ctx`.",
            "params": [
                {
                    "name": "title",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "ctx",
                    "description": "",
                    "type": "Context"
                }
            ],
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5080,
            "description": "Inherit from `EventEmitter.prototype`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5090,
            "description": "Return a clone of this `Suite`.",
            "return": {
                "description": "",
                "type": "Suite"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5107,
            "description": "Set timeout `ms` or short-hand such as \"2s\".",
            "params": [
                {
                    "name": "ms",
                    "description": "",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "for chaining",
                "type": "Suite|Number"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5123,
            "description": "Set slow `ms` or short-hand such as \"2s\".",
            "params": [
                {
                    "name": "ms",
                    "description": "",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "for chaining",
                "type": "Suite|Number"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5139,
            "description": "Sets whether to bail after first error.",
            "params": [
                {
                    "name": "bail",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "for chaining",
                "type": "Suite|Number"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5154,
            "description": "Run `fn(test[, done])` before running tests.",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "for chaining",
                "type": "Suite"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5174,
            "description": "Run `fn(test[, done])` after running tests.",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "for chaining",
                "type": "Suite"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5194,
            "description": "Run `fn(test[, done])` before each test case.",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "for chaining",
                "type": "Suite"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5214,
            "description": "Run `fn(test[, done])` after each test case.",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "for chaining",
                "type": "Suite"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5234,
            "description": "Add a test `suite`.",
            "params": [
                {
                    "name": "suite",
                    "description": "",
                    "type": "Suite"
                }
            ],
            "return": {
                "description": "for chaining",
                "type": "Suite"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5252,
            "description": "Add a `test` to this suite.",
            "params": [
                {
                    "name": "test",
                    "description": "",
                    "type": "Test"
                }
            ],
            "return": {
                "description": "for chaining",
                "type": "Suite"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5270,
            "description": "Return the full title generated by recursively\nconcatenating the parent's full title.",
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5286,
            "description": "Return the total number of tests.",
            "return": {
                "description": "",
                "type": "Number"
            },
            "api": "public",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5299,
            "description": "Iterates through each suite recursively to find\nall tests. Applies a function in the format\n`fn(test)`.",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Suite"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5321,
            "description": "Module dependencies.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5327,
            "description": "Expose `Test`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5333,
            "description": "Initialize a new `Test` with the given `title` and callback `fn`.",
            "params": [
                {
                    "name": "title",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5347,
            "description": "Inherit from `Runnable.prototype`.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5360,
            "description": "Module dependencies.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5369,
            "description": "Ignored directories.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5375,
            "description": "Escape special characters in the given string of html.",
            "params": [
                {
                    "name": "html",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5391,
            "description": "Array#forEach (<=IE8)",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "",
                    "type": "Object"
                }
            ],
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5405,
            "description": "Array#map (<=IE8)",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "",
                    "type": "Object"
                }
            ],
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5421,
            "description": "Array#indexOf (<=IE8)",
            "params": [
                {
                    "name": "arr",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "obj",
                    "description": "to find index of",
                    "type": "Object"
                },
                {
                    "name": "start",
                    "description": "",
                    "type": "Number"
                }
            ],
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5438,
            "description": "Array#reduce (<=IE8)",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "initial",
                    "description": "value",
                    "type": "Object"
                }
            ],
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5457,
            "description": "Array#filter (<=IE8)",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5476,
            "description": "Object.keys (<=IE8)",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "keys",
                "type": "Array"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5497,
            "description": "Watch the given `files` for changes\nand invoke `fn(file)` on modification.",
            "params": [
                {
                    "name": "files",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5516,
            "description": "Ignored files.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5524,
            "description": "Lookup files in the given `dir`.",
            "return": {
                "description": "",
                "type": "Array"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5548,
            "description": "Compute a slug from the given `str`.",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5563,
            "description": "Strip the function definition from `str`,\nand re-indent for pre whitespace.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5583,
            "description": "Escape regular expression characters in `str`.",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5595,
            "description": "Trim the given `str`.",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5607,
            "description": "Parse the given `qs`.",
            "params": [
                {
                    "name": "qs",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5626,
            "description": "Highlight the given string of `js`.",
            "params": [
                {
                    "name": "js",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5646,
            "description": "Highlight the contents of tag `name`.",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "private",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5664,
            "description": "Save timer references to avoid Sinon interfering (see GH-237).",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5674,
            "description": "Node shims.\n\nThese are meant only to allow\nmocha.js to run untouched, not\nto allow running node code in\nthe browser.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5689,
            "description": "Remove uncaughtException listener.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5701,
            "description": "Implements uncaughtException listener.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5715,
            "description": "Expose mocha.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5742,
            "description": "High-performance override of Runner.immediately.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5753,
            "description": "Function to allow assertion libraries to throw errors directly into mocha.\nThis is useful when running tests in a browser because window.onerror will\nonly receive the 'message' attribute of the Error.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5765,
            "description": "Override ui to ensure that the ui functions are initialized.\nNormally this would happen in Mocha.prototype.loadFiles.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5776,
            "description": "Setup mocha with the given setting options.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5786,
            "description": "Run mocha, returning the Runner.",
            "class": ""
        },
        {
            "file": "test\\lib\\mocha.js",
            "line": 5807,
            "description": "Expose the process shim.",
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 1,
            "description": "Sinon.JS 1.8.2, 2014/02/11",
            "author": "Contributors: https://github.com/cjohansen/Sinon.JS/blob/master/AUTHORS\n\n(The BSD License)\n\nCopyright (c) 2010-2014, Christian Johansen, christian@cjohansen.no\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright notice,\n      this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright notice,\n      this list of conditions and the following disclaimer in the documentation\n      and/or other materials provided with the distribution.\n    * Neither the name of Christian Johansen nor the names of his contributors\n      may be used to endorse or promote products derived from this software\n      without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 63,
            "name": "samsam.isArguments",
            "params": [
                {
                    "name": "Object",
                    "description": "object\n\nReturns ``true`` if ``object`` is an ``arguments`` object,\n``false`` otherwise."
                }
            ],
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 85,
            "name": "samsam.isElement",
            "params": [
                {
                    "name": "Object",
                    "description": "object\n\nReturns ``true`` if ``object`` is a DOM element node. Unlike\nUnderscore.js/lodash, this function will return ``false`` if ``object``\nis an *element-like* object, i.e. a regular object with a ``nodeType``\nproperty that holds the value ``1``."
                }
            ],
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 105,
            "name": "samsam.keys",
            "params": [
                {
                    "name": "Object",
                    "description": "object\n\nReturn an array of own property names."
                }
            ],
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 119,
            "name": "samsam.isDate",
            "params": [
                {
                    "name": "Object",
                    "description": "value\n\nReturns true if the object is a ``Date``, or *date-like*. Duck typing\nof date objects work by checking that the object has a ``getTime``\nfunction whose return value equals the return value from the object's\n``valueOf``."
                }
            ],
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 133,
            "name": "samsam.isNegZero",
            "params": [
                {
                    "name": "Object",
                    "description": "value\n\nReturns ``true`` if ``value`` is ``-0``."
                }
            ],
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 143,
            "name": "samsam.equal",
            "params": [
                {
                    "name": "Object",
                    "description": "obj1"
                },
                {
                    "name": "Object",
                    "description": "obj2\n\nReturns ``true`` if two objects are strictly equal. Compared to\n``===`` there are two exceptions:\n\n  - NaN is considered equal to NaN\n  - -0 and +0 are not considered equal"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 161,
            "name": "samsam.deepEqual",
            "params": [
                {
                    "name": "Object",
                    "description": "obj1"
                },
                {
                    "name": "Object",
                    "description": "obj2\n\nDeep equal comparison. Two values are \"deep equal\" if:\n\n  - They are equal, according to samsam.identical\n  - They are both date objects representing the same time\n  - They are both arrays containing elements that are all deepEqual\n  - They are objects with the same set of properties, and each property\n    in ``obj1`` is deepEqual to the corresponding property in ``obj2``\n\nSupports cyclic objects."
                }
            ],
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 191,
            "description": "used to check, if the value of a property is an object\n(cyclic logic is only needed for objects)\nonly needed for cyclic logic",
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 211,
            "description": "returns the index of the given object in the\ngiven objects array, -1 if not contained\nonly needed for cyclic logic",
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 358,
            "name": "samsam.match",
            "params": [
                {
                    "name": "Object",
                    "description": "object"
                },
                {
                    "name": "Object",
                    "description": "matcher\n\nCompare arbitrary value ``object`` with matcher."
                }
            ],
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 618,
            "description": "Sinon core utilities. For internal use only.",
            "author": "Christian Johansen (christian@cjohansen.no)",
            "license": "BSD\n\nCopyright (c) 2010-2013 Christian Johansen",
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 987,
            "description": "Match functions",
            "author": "Maximilian Antoni (mail@maxantoni.de)",
            "license": "BSD\n\nCopyright (c) 2012 Maximilian Antoni",
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 1223,
            "depend": "match.js",
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 1229,
            "description": "Spy calls",
            "author": "Maximilian Antoni (mail@maxantoni.de)",
            "license": "BSD\n\nCopyright (c) 2010-2013 Christian Johansen\nCopyright (c) 2013 Maximilian Antoni",
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 1426,
            "depend": "call.js",
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 1432,
            "description": "Spy functions",
            "author": "Christian Johansen (christian@cjohansen.no)",
            "license": "BSD\n\nCopyright (c) 2010-2013 Christian Johansen",
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 1833,
            "depend": "../sinon.js",
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 1838,
            "description": "Stub behavior",
            "author": "Tim Fischbach (mail@timfischbach.de)",
            "license": "BSD\n\nCopyright (c) 2010-2013 Christian Johansen",
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 2164,
            "depend": "behavior.js",
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 2171,
            "description": "Stub functions",
            "author": "Christian Johansen (christian@cjohansen.no)",
            "license": "BSD\n\nCopyright (c) 2010-2013 Christian Johansen",
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 2323,
            "depend": "stub.js",
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 2329,
            "description": "Mock functions.",
            "author": "Christian Johansen (christian@cjohansen.no)",
            "license": "BSD\n\nCopyright (c) 2010-2013 Christian Johansen",
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 2772,
            "depend": "mock.js",
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 2779,
            "description": "Collections of stubs, spies and mocks.",
            "author": "Christian Johansen (christian@cjohansen.no)",
            "license": "BSD\n\nCopyright (c) 2010-2013 Christian Johansen",
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 2927,
            "description": "Fake timer API\nsetTimeout\nsetInterval\nclearTimeout\nclearInterval\ntick\nreset\nDate\n\nInspired by jsUnitMockTimeOut from JsUnit",
            "author": "Christian Johansen (christian@cjohansen.no)",
            "license": "BSD\n\nCopyright (c) 2010-2013 Christian Johansen",
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 3312,
            "description": "Minimal Event interface implementation\n\nOriginal implementation by Sven Fuchs: https://gist.github.com/995028\nModifications and tests by Christian Johansen.",
            "author": "Christian Johansen (christian@cjohansen.no)",
            "license": "BSD\n\nCopyright (c) 2011 Sven Fuchs, Christian Johansen",
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 3385,
            "depend": "event.js",
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 3391,
            "description": "Fake XMLHttpRequest object",
            "author": "Christian Johansen (christian@cjohansen.no)",
            "license": "BSD\n\nCopyright (c) 2010-2013 Christian Johansen",
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 3953,
            "depend": "fake_xml_http_request.js",
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 3958,
            "description": "The Sinon \"server\" mimics a web server that receives requests from\nsinon.FakeXMLHttpRequest and provides an API to respond to those requests,\nboth synchronously and asynchronously. To respond synchronuously, canned\nanswers have to be provided upfront.",
            "author": "Christian Johansen (christian@cjohansen.no)",
            "license": "BSD\n\nCopyright (c) 2010-2013 Christian Johansen",
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 4165,
            "depend": "fake_timers.js",
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 4171,
            "description": "Add-on for sinon.fakeServer that automatically handles a fake timer along with\nthe FakeXMLHttpRequest. The direct inspiration for this add-on is jQuery\n1.3.x, which does not use xhr object's onreadystatehandler at all - instead,\nit polls the object for completion with setInterval. Dispite the direct\nmotivation, there is nothing jQuery-specific in this file, so it can be used\nin any environment where the ajax implementation depends on setInterval or\nsetTimeout.",
            "author": "Christian Johansen (christian@cjohansen.no)",
            "license": "BSD\n\nCopyright (c) 2010-2013 Christian Johansen",
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 4248,
            "depend": "util/fake_server_with_clock.js",
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 4256,
            "description": "Manages fake collections as well as fake utilities such as Sinon's\ntimers and fake XHR implementation in one convenient object.",
            "author": "Christian Johansen (christian@cjohansen.no)",
            "license": "BSD\n\nCopyright (c) 2010-2013 Christian Johansen",
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 4373,
            "depend": "sandbox.js",
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 4381,
            "description": "Test function, sandboxes fakes",
            "author": "Christian Johansen (christian@cjohansen.no)",
            "license": "BSD\n\nCopyright (c) 2010-2013 Christian Johansen",
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 4448,
            "depend": "test.js",
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 4454,
            "description": "Test case, sandboxes all test functions",
            "author": "Christian Johansen (christian@cjohansen.no)",
            "license": "BSD\n\nCopyright (c) 2010-2013 Christian Johansen",
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 4545,
            "depend": "stub.js",
            "class": ""
        },
        {
            "file": "test\\lib\\sinon.js",
            "line": 4551,
            "description": "Assertions matching the test spy retrieval interface.",
            "author": "Christian Johansen (christian@cjohansen.no)",
            "license": "BSD\n\nCopyright (c) 2010-2013 Christian Johansen",
            "class": ""
        },
        {
            "file": "test\\test01.js",
            "line": 1,
            "description": "Created by zhanglingkang on 2014/7/30.",
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:3"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:55"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:87"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:115"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:127"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:142"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:341"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:396"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:429"
        },
        {
            "message": "param name missing: {Function}",
            "line": " test\\lib\\chai.js:753"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " test\\lib\\chai.js:753"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:753"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:958"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:958"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:994"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:994"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:1012"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:1012"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:1030"
        },
        {
            "message": "unknown tag: alias",
            "line": " test\\lib\\chai.js:1030"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:1030"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:1069"
        },
        {
            "message": "unknown tag: alias",
            "line": " test\\lib\\chai.js:1069"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:1069"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:1116"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:1116"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:1138"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:1138"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:1159"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:1159"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:1180"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:1180"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:1200"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:1200"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:1220"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:1220"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:1246"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:1246"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:1278"
        },
        {
            "message": "unknown tag: alias",
            "line": " test\\lib\\chai.js:1278"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:1278"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:1305"
        },
        {
            "message": "unknown tag: alias",
            "line": " test\\lib\\chai.js:1305"
        },
        {
            "message": "unknown tag: alias",
            "line": " test\\lib\\chai.js:1305"
        },
        {
            "message": "unknown tag: alias",
            "line": " test\\lib\\chai.js:1305"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:1305"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:1348"
        },
        {
            "message": "unknown tag: alias",
            "line": " test\\lib\\chai.js:1348"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:1348"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:1378"
        },
        {
            "message": "unknown tag: alias",
            "line": " test\\lib\\chai.js:1378"
        },
        {
            "message": "unknown tag: alias",
            "line": " test\\lib\\chai.js:1378"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:1378"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:1427"
        },
        {
            "message": "unknown tag: alias",
            "line": " test\\lib\\chai.js:1427"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:1427"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:1474"
        },
        {
            "message": "unknown tag: alias",
            "line": " test\\lib\\chai.js:1474"
        },
        {
            "message": "unknown tag: alias",
            "line": " test\\lib\\chai.js:1474"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:1474"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:1523"
        },
        {
            "message": "unknown tag: alias",
            "line": " test\\lib\\chai.js:1523"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:1523"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:1570"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:1570"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:1613"
        },
        {
            "message": "unknown tag: alias",
            "line": " test\\lib\\chai.js:1613"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:1613"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:1644"
        },
        {
            "message": "unknown tag: alias",
            "line": " test\\lib\\chai.js:1644"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " test\\lib\\chai.js:1644"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:1644"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:1739"
        },
        {
            "message": "unknown tag: alias",
            "line": " test\\lib\\chai.js:1739"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:1739"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:1766"
        },
        {
            "message": "unknown tag: alias",
            "line": " test\\lib\\chai.js:1766"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:1766"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:1814"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:1814"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:1837"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:1837"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:1863"
        },
        {
            "message": "unknown tag: alias",
            "line": " test\\lib\\chai.js:1863"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:1863"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:1931"
        },
        {
            "message": "unknown tag: alias",
            "line": " test\\lib\\chai.js:1931"
        },
        {
            "message": "unknown tag: alias",
            "line": " test\\lib\\chai.js:1931"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " test\\lib\\chai.js:1931"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:1931"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2088"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2088"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2124"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2124"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2144"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2144"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2169"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2169"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2199"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2199"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2266"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2266"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2289"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2289"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2311"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2311"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2329"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2329"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2347"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2347"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2373"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2373"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2399"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2399"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2417"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2417"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2435"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2435"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2453"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2453"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2471"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2471"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2489"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2489"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2507"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2507"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2524"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2524"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2542"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2542"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2560"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2560"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2578"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2578"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2596"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2596"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2614"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2614"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2633"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2633"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2652"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2652"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2670"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2670"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2688"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2688"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2706"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2706"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2724"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2724"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2742"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2742"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2760"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2760"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2781"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2781"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2802"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2802"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2826"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2826"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2845"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2845"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2866"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2866"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2887"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2887"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2907"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2907"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2927"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2927"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2945"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2945"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2963"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2963"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2981"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2981"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:2999"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:2999"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:3018"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:3018"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:3037"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:3037"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:3057"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:3057"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:3077"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:3077"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:3098"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:3098"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:3119"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:3119"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:3138"
        },
        {
            "message": "unknown tag: alias",
            "line": " test\\lib\\chai.js:3138"
        },
        {
            "message": "unknown tag: alias",
            "line": " test\\lib\\chai.js:3138"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:3138"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:3172"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:3172"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:3199"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:3199"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:3226"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:3226"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:3245"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:3245"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:3264"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:3264"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:3427"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:3427"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:3514"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:3514"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:3554"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:3554"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:3597"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:3597"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " test\\lib\\chai.js:3654"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:3654"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:3654"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:3691"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:3691"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " test\\lib\\chai.js:3758"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:3758"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:3758"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " test\\lib\\chai.js:3862"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:3862"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:3862"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:4346"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:4346"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:4391"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:4391"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:4445"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:4445"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:4502"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:4502"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:4587"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:4587"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\chai.js:4648"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\chai.js:4648"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:433"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:441"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:465"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:485"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:522"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:541"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:563"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:624"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:637"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:650"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:760"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:768"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:782"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:795"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:808"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:839"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:862"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:1398"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:1410"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:1457"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:1470"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:1482"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:1507"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:1523"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:1542"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:1566"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:1581"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:1593"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:1606"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:1618"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:1630"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:1643"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:1658"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:1673"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:1686"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:1699"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:1711"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:1748"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:1767"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:1806"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:1822"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:1938"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:2000"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:2058"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:2124"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:2169"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:2184"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:2218"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:2250"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:2268"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:2281"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:2296"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:2309"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:2343"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:2376"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:2436"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:2505"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:2529"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:2582"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:2858"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:2900"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:2938"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:2982"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:3016"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:3047"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:3081"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:3120"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:3172"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:3258"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:3328"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:3422"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:3468"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:3514"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:3528"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:3553"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:3570"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:3588"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:3624"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:3644"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:3655"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:3666"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:3688"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:3744"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:3832"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:3923"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:3970"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:4010"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:4143"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:4171"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:4188"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:4204"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:4216"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:4226"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:4242"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:4259"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:4269"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:4377"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:4410"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:4429"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:4447"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:4469"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:4488"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:4503"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:4534"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:4553"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:4581"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:4630"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:4666"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:4679"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:4692"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:4707"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:4730"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:4823"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:4878"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:4904"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:4943"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:4954"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:4988"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:5033"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:5055"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:5090"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:5107"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:5123"
        },
        {
            "message": "replacing incorrect tag: parma with param",
            "line": " test\\lib\\mocha.js:5139"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:5139"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:5154"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:5174"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:5194"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:5214"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:5234"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:5252"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:5270"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:5286"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:5299"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:5333"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:5375"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:5391"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:5405"
        },
        {
            "message": "replacing incorrect tag: parma with param",
            "line": " test\\lib\\mocha.js:5421"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:5421"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:5438"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:5457"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:5476"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:5497"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:5524"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:5548"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:5583"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:5595"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:5607"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:5626"
        },
        {
            "message": "unknown tag: api",
            "line": " test\\lib\\mocha.js:5646"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\sinon.js:63"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\sinon.js:85"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\sinon.js:105"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\sinon.js:119"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\sinon.js:133"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\sinon.js:143"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\sinon.js:161"
        },
        {
            "message": "unknown tag: name",
            "line": " test\\lib\\sinon.js:358"
        },
        {
            "message": "unknown tag: license",
            "line": " test\\lib\\sinon.js:618"
        },
        {
            "message": "unknown tag: license",
            "line": " test\\lib\\sinon.js:987"
        },
        {
            "message": "unknown tag: depend",
            "line": " test\\lib\\sinon.js:1223"
        },
        {
            "message": "unknown tag: depend",
            "line": " test\\lib\\sinon.js:1223"
        },
        {
            "message": "unknown tag: license",
            "line": " test\\lib\\sinon.js:1229"
        },
        {
            "message": "unknown tag: depend",
            "line": " test\\lib\\sinon.js:1426"
        },
        {
            "message": "unknown tag: depend",
            "line": " test\\lib\\sinon.js:1426"
        },
        {
            "message": "unknown tag: license",
            "line": " test\\lib\\sinon.js:1432"
        },
        {
            "message": "unknown tag: depend",
            "line": " test\\lib\\sinon.js:1833"
        },
        {
            "message": "unknown tag: license",
            "line": " test\\lib\\sinon.js:1838"
        },
        {
            "message": "unknown tag: depend",
            "line": " test\\lib\\sinon.js:2164"
        },
        {
            "message": "unknown tag: depend",
            "line": " test\\lib\\sinon.js:2164"
        },
        {
            "message": "unknown tag: depend",
            "line": " test\\lib\\sinon.js:2164"
        },
        {
            "message": "unknown tag: license",
            "line": " test\\lib\\sinon.js:2171"
        },
        {
            "message": "unknown tag: depend",
            "line": " test\\lib\\sinon.js:2323"
        },
        {
            "message": "unknown tag: depend",
            "line": " test\\lib\\sinon.js:2323"
        },
        {
            "message": "unknown tag: license",
            "line": " test\\lib\\sinon.js:2329"
        },
        {
            "message": "unknown tag: depend",
            "line": " test\\lib\\sinon.js:2772"
        },
        {
            "message": "unknown tag: depend",
            "line": " test\\lib\\sinon.js:2772"
        },
        {
            "message": "unknown tag: depend",
            "line": " test\\lib\\sinon.js:2772"
        },
        {
            "message": "unknown tag: license",
            "line": " test\\lib\\sinon.js:2779"
        },
        {
            "message": "unknown tag: license",
            "line": " test\\lib\\sinon.js:2927"
        },
        {
            "message": "unknown tag: license",
            "line": " test\\lib\\sinon.js:3312"
        },
        {
            "message": "unknown tag: depend",
            "line": " test\\lib\\sinon.js:3385"
        },
        {
            "message": "unknown tag: depend",
            "line": " test\\lib\\sinon.js:3385"
        },
        {
            "message": "unknown tag: license",
            "line": " test\\lib\\sinon.js:3391"
        },
        {
            "message": "unknown tag: depend",
            "line": " test\\lib\\sinon.js:3953"
        },
        {
            "message": "unknown tag: license",
            "line": " test\\lib\\sinon.js:3958"
        },
        {
            "message": "unknown tag: depend",
            "line": " test\\lib\\sinon.js:4165"
        },
        {
            "message": "unknown tag: depend",
            "line": " test\\lib\\sinon.js:4165"
        },
        {
            "message": "unknown tag: license",
            "line": " test\\lib\\sinon.js:4171"
        },
        {
            "message": "unknown tag: depend",
            "line": " test\\lib\\sinon.js:4248"
        },
        {
            "message": "unknown tag: depend",
            "line": " test\\lib\\sinon.js:4248"
        },
        {
            "message": "unknown tag: depend",
            "line": " test\\lib\\sinon.js:4248"
        },
        {
            "message": "unknown tag: depend",
            "line": " test\\lib\\sinon.js:4248"
        },
        {
            "message": "unknown tag: license",
            "line": " test\\lib\\sinon.js:4256"
        },
        {
            "message": "unknown tag: depend",
            "line": " test\\lib\\sinon.js:4373"
        },
        {
            "message": "unknown tag: depend",
            "line": " test\\lib\\sinon.js:4373"
        },
        {
            "message": "unknown tag: depend",
            "line": " test\\lib\\sinon.js:4373"
        },
        {
            "message": "unknown tag: depend",
            "line": " test\\lib\\sinon.js:4373"
        },
        {
            "message": "unknown tag: license",
            "line": " test\\lib\\sinon.js:4381"
        },
        {
            "message": "unknown tag: depend",
            "line": " test\\lib\\sinon.js:4448"
        },
        {
            "message": "unknown tag: depend",
            "line": " test\\lib\\sinon.js:4448"
        },
        {
            "message": "unknown tag: license",
            "line": " test\\lib\\sinon.js:4454"
        },
        {
            "message": "unknown tag: depend",
            "line": " test\\lib\\sinon.js:4545"
        },
        {
            "message": "unknown tag: depend",
            "line": " test\\lib\\sinon.js:4545"
        },
        {
            "message": "unknown tag: license",
            "line": " test\\lib\\sinon.js:4551"
        },
        {
            "message": "Missing item type\nCODE_REG在tpl中的某一匹配结果",
            "line": " src\\template-engine.js:38"
        },
        {
            "message": "Missing item type\nCODE_REG在tpl中的某一匹配部分",
            "line": " src\\template-engine.js:43"
        },
        {
            "message": "Missing item type\n模板lastPos之前的代码已被解析。",
            "line": " src\\template-engine.js:48"
        },
        {
            "message": "Missing item type\n模板的长度",
            "line": " src\\template-engine.js:53"
        },
        {
            "message": "Missing item type\n放入eval中执行的代码。",
            "line": " src\\template-engine.js:58"
        },
        {
            "message": "Missing item type\nEXPRESSION_REG在tpl中的某一匹配部分",
            "line": " src\\template-engine.js:63"
        },
        {
            "message": "Missing item type\n放入eval中的执行的代码片段。",
            "line": " src\\template-engine.js:68"
        },
        {
            "message": "Missing item type\nview.join(\"\")为模板与数据结合后渲染成的视图",
            "line": " src\\template-engine.js:107"
        },
        {
            "message": "Missing item type\n保存data的键值。",
            "line": " src\\template-engine.js:112"
        },
        {
            "message": "Missing item type\n增加parsedCode变量是为了保持evalCode不随着此函数的调用改变",
            "line": " src\\template-engine.js:117"
        },
        {
            "message": "Missing item type\nRequire the given path.",
            "line": " test\\lib\\chai.js:3"
        },
        {
            "message": "Missing item type\nRegistered modules.",
            "line": " test\\lib\\chai.js:43"
        },
        {
            "message": "Missing item type\nRegistered aliases.",
            "line": " test\\lib\\chai.js:49"
        },
        {
            "message": "Missing item type\nResolve `path`.\n\nLookup:\n\n  - PATH/index.js\n  - PATH.js\n  - PATH",
            "line": " test\\lib\\chai.js:55"
        },
        {
            "message": "Missing item type\nNormalize `path` relative to the current path.",
            "line": " test\\lib\\chai.js:87"
        },
        {
            "message": "Missing item type\nRegister module at `path` with callback `definition`.",
            "line": " test\\lib\\chai.js:115"
        },
        {
            "message": "Missing item type\nAlias a module definition.",
            "line": " test\\lib\\chai.js:127"
        },
        {
            "message": "Missing item type\nReturn a require function relative to the `parent` path.",
            "line": " test\\lib\\chai.js:142"
        },
        {
            "message": "Missing item type\nlastIndexOf helper.",
            "line": " test\\lib\\chai.js:153"
        },
        {
            "message": "Missing item type\nThe relative require() itself.",
            "line": " test\\lib\\chai.js:165"
        },
        {
            "message": "Missing item type\nResolve relative to the parent.",
            "line": " test\\lib\\chai.js:174"
        },
        {
            "message": "Missing item type\nCheck if module is defined at `path`.",
            "line": " test\\lib\\chai.js:193"
        },
        {
            "message": "Missing item type\n### AssertionError\n\nAn extension of the JavaScript `Error` constructor for\nassertion and validation scenarios.",
            "line": " test\\lib\\chai.js:247"
        },
        {
            "message": "Missing item type\nAllow errors to be converted to JSON for static transfer.",
            "line": " test\\lib\\chai.js:296"
        },
        {
            "message": "Missing item type\n### typeOf (obj)\n\nUse several different techniques to determine\nthe type of object being tested.",
            "line": " test\\lib\\chai.js:341"
        },
        {
            "message": "Missing item type\n### Library\n\nCreate a repository for custom type detection.\n\n```js\nvar lib = new type.Library;\n```",
            "line": " test\\lib\\chai.js:364"
        },
        {
            "message": "Missing item type\n#### .of (obj)\n\nExpose replacement `typeof` detection to the library.\n\n```js\nif ('string' === lib.of('hello world')) {\n  // ...\n}\n```",
            "line": " test\\lib\\chai.js:379"
        },
        {
            "message": "Missing item type\n#### .define (type, test)\n\nAdd a test to for the `.test()` assertion.\n\nCan be defined as a regular expression:\n\n```js\nlib.define('int', /^[0-9]+$/);\n```\n\n... or as a function:\n\n```js\nlib.define('bln', function (obj) {\n  if ('boolean' === lib.of(obj)) return true;\n  var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];\n  if ('string' === lib.of(obj)) obj = obj.toLowerCase();\n  return !! ~blns.indexOf(obj);\n});\n```",
            "line": " test\\lib\\chai.js:396"
        },
        {
            "message": "Missing item type\n#### .test (obj, test)\n\nAssert that an object is of type. Will first\ncheck natives, and if that does not pass it will\nuse the user defined custom tests.\n\n```js\nassert(lib.test('1', 'int'));\nassert(lib.test('yes', 'bln'));\n```",
            "line": " test\\lib\\chai.js:429"
        },
        {
            "message": "Missing item type\nAssert super-strict (egal) equality between\ntwo objects of any type.",
            "line": " test\\lib\\chai.js:491"
        },
        {
            "message": "Missing item type\n# .use(function)\n\nProvides a way to extend the internals of Chai",
            "line": " test\\lib\\chai.js:753"
        },
        {
            "message": "Missing item type\n### Language Chains\n\nThe following are provided as chainable getters to\nimprove the readability of your assertions. They\ndo not provide an testing capability unless they\nhave been overwritten by a plugin.\n\n**Chains**\n\n- to\n- be\n- been\n- is\n- that\n- and\n- has\n- have\n- with\n- at\n- of\n- same",
            "line": " test\\lib\\chai.js:958"
        },
        {
            "message": "Missing item type\n### .not\n\nNegates any of assertions following in the chain.\n\n    expect(foo).to.not.equal('bar');\n    expect(goodFn).to.not.throw(Error);\n    expect({ foo: 'baz' }).to.have.property('foo')\n      .and.not.equal('bar');",
            "line": " test\\lib\\chai.js:994"
        },
        {
            "message": "Missing item type\n### .deep\n\nSets the `deep` flag, later used by the `equal` and\n`property` assertions.\n\n    expect(foo).to.deep.equal({ bar: 'baz' });\n    expect({ foo: { bar: { baz: 'quux' } } })\n      .to.have.deep.property('foo.bar.baz', 'quux');",
            "line": " test\\lib\\chai.js:1012"
        },
        {
            "message": "Missing item type\n### .a(type)\n\nThe `a` and `an` assertions are aliases that can be\nused either as language chains or to assert a value's\ntype.\n\n    // typeof\n    expect('test').to.be.a('string');\n    expect({ foo: 'bar' }).to.be.an('object');\n    expect(null).to.be.a('null');\n    expect(undefined).to.be.an('undefined');\n\n    // language chain\n    expect(foo).to.be.an.instanceof(Foo);",
            "line": " test\\lib\\chai.js:1030"
        },
        {
            "message": "Missing item type\n### .include(value)\n\nThe `include` and `contain` assertions can be used as either property\nbased language chains or as methods to assert the inclusion of an object\nin an array or a substring in a string. When used as language chains,\nthey toggle the `contain` flag for the `keys` assertion.\n\n    expect([1,2,3]).to.include(2);\n    expect('foobar').to.contain('foo');\n    expect({ foo: 'bar', hello: 'universe' }).to.include.keys('foo');",
            "line": " test\\lib\\chai.js:1069"
        },
        {
            "message": "Missing item type\n### .ok\n\nAsserts that the target is truthy.\n\n    expect('everthing').to.be.ok;\n    expect(1).to.be.ok;\n    expect(false).to.not.be.ok;\n    expect(undefined).to.not.be.ok;\n    expect(null).to.not.be.ok;",
            "line": " test\\lib\\chai.js:1116"
        },
        {
            "message": "Missing item type\n### .true\n\nAsserts that the target is `true`.\n\n    expect(true).to.be.true;\n    expect(1).to.not.be.true;",
            "line": " test\\lib\\chai.js:1138"
        },
        {
            "message": "Missing item type\n### .false\n\nAsserts that the target is `false`.\n\n    expect(false).to.be.false;\n    expect(0).to.not.be.false;",
            "line": " test\\lib\\chai.js:1159"
        },
        {
            "message": "Missing item type\n### .null\n\nAsserts that the target is `null`.\n\n    expect(null).to.be.null;\n    expect(undefined).not.to.be.null;",
            "line": " test\\lib\\chai.js:1180"
        },
        {
            "message": "Missing item type\n### .undefined\n\nAsserts that the target is `undefined`.\n\n    expect(undefined).to.be.undefined;\n    expect(null).to.not.be.undefined;",
            "line": " test\\lib\\chai.js:1200"
        },
        {
            "message": "Missing item type\n### .exist\n\nAsserts that the target is neither `null` nor `undefined`.\n\n    var foo = 'hi'\n      , bar = null\n      , baz;\n\n    expect(foo).to.exist;\n    expect(bar).to.not.exist;\n    expect(baz).to.not.exist;",
            "line": " test\\lib\\chai.js:1220"
        },
        {
            "message": "Missing item type\n### .empty\n\nAsserts that the target's length is `0`. For arrays, it checks\nthe `length` property. For objects, it gets the count of\nenumerable keys.\n\n    expect([]).to.be.empty;\n    expect('').to.be.empty;\n    expect({}).to.be.empty;",
            "line": " test\\lib\\chai.js:1246"
        },
        {
            "message": "Missing item type\n### .arguments\n\nAsserts that the target is an arguments object.\n\n    function test () {\n      expect(arguments).to.be.arguments;\n    }",
            "line": " test\\lib\\chai.js:1278"
        },
        {
            "message": "Missing item type\n### .equal(value)\n\nAsserts that the target is strictly equal (`===`) to `value`.\nAlternately, if the `deep` flag is set, asserts that\nthe target is deeply equal to `value`.\n\n    expect('hello').to.equal('hello');\n    expect(42).to.equal(42);\n    expect(1).to.not.equal(true);\n    expect({ foo: 'bar' }).to.not.equal({ foo: 'bar' });\n    expect({ foo: 'bar' }).to.deep.equal({ foo: 'bar' });",
            "line": " test\\lib\\chai.js:1305"
        },
        {
            "message": "Missing item type\n### .eql(value)\n\nAsserts that the target is deeply equal to `value`.\n\n    expect({ foo: 'bar' }).to.eql({ foo: 'bar' });\n    expect([ 1, 2, 3 ]).to.eql([ 1, 2, 3 ]);",
            "line": " test\\lib\\chai.js:1348"
        },
        {
            "message": "Missing item type\n### .above(value)\n\nAsserts that the target is greater than `value`.\n\n    expect(10).to.be.above(5);\n\nCan also be used in conjunction with `length` to\nassert a minimum length. The benefit being a\nmore informative error message than if the length\nwas supplied directly.\n\n    expect('foo').to.have.length.above(2);\n    expect([ 1, 2, 3 ]).to.have.length.above(2);",
            "line": " test\\lib\\chai.js:1378"
        },
        {
            "message": "Missing item type\n### .least(value)\n\nAsserts that the target is greater than or equal to `value`.\n\n    expect(10).to.be.at.least(10);\n\nCan also be used in conjunction with `length` to\nassert a minimum length. The benefit being a\nmore informative error message than if the length\nwas supplied directly.\n\n    expect('foo').to.have.length.of.at.least(2);\n    expect([ 1, 2, 3 ]).to.have.length.of.at.least(3);",
            "line": " test\\lib\\chai.js:1427"
        },
        {
            "message": "Missing item type\n### .below(value)\n\nAsserts that the target is less than `value`.\n\n    expect(5).to.be.below(10);\n\nCan also be used in conjunction with `length` to\nassert a maximum length. The benefit being a\nmore informative error message than if the length\nwas supplied directly.\n\n    expect('foo').to.have.length.below(4);\n    expect([ 1, 2, 3 ]).to.have.length.below(4);",
            "line": " test\\lib\\chai.js:1474"
        },
        {
            "message": "Missing item type\n### .most(value)\n\nAsserts that the target is less than or equal to `value`.\n\n    expect(5).to.be.at.most(5);\n\nCan also be used in conjunction with `length` to\nassert a maximum length. The benefit being a\nmore informative error message than if the length\nwas supplied directly.\n\n    expect('foo').to.have.length.of.at.most(4);\n    expect([ 1, 2, 3 ]).to.have.length.of.at.most(3);",
            "line": " test\\lib\\chai.js:1523"
        },
        {
            "message": "Missing item type\n### .within(start, finish)\n\nAsserts that the target is within a range.\n\n    expect(7).to.be.within(5,10);\n\nCan also be used in conjunction with `length` to\nassert a length range. The benefit being a\nmore informative error message than if the length\nwas supplied directly.\n\n    expect('foo').to.have.length.within(2,4);\n    expect([ 1, 2, 3 ]).to.have.length.within(2,4);",
            "line": " test\\lib\\chai.js:1570"
        },
        {
            "message": "Missing item type\n### .instanceof(constructor)\n\nAsserts that the target is an instance of `constructor`.\n\n    var Tea = function (name) { this.name = name; }\n      , Chai = new Tea('chai');\n\n    expect(Chai).to.be.an.instanceof(Tea);\n    expect([ 1, 2, 3 ]).to.be.instanceof(Array);",
            "line": " test\\lib\\chai.js:1613"
        },
        {
            "message": "Missing item type\n### .property(name, [value])\n\nAsserts that the target has a property `name`, optionally asserting that\nthe value of that property is strictly equal to  `value`.\nIf the `deep` flag is set, you can use dot- and bracket-notation for deep\nreferences into objects and arrays.\n\n    // simple referencing\n    var obj = { foo: 'bar' };\n    expect(obj).to.have.property('foo');\n    expect(obj).to.have.property('foo', 'bar');\n\n    // deep referencing\n    var deepObj = {\n        green: { tea: 'matcha' }\n      , teas: [ 'chai', 'matcha', { tea: 'konacha' } ]\n    };\n\n    expect(deepObj).to.have.deep.property('green.tea', 'matcha');\n    expect(deepObj).to.have.deep.property('teas[1]', 'matcha');\n    expect(deepObj).to.have.deep.property('teas[2].tea', 'konacha');\n\nYou can also use an array as the starting point of a `deep.property`\nassertion, or traverse nested arrays.\n\n    var arr = [\n        [ 'chai', 'matcha', 'konacha' ]\n      , [ { tea: 'chai' }\n        , { tea: 'matcha' }\n        , { tea: 'konacha' } ]\n    ];\n\n    expect(arr).to.have.deep.property('[0][1]', 'matcha');\n    expect(arr).to.have.deep.property('[1][2].tea', 'konacha');\n\nFurthermore, `property` changes the subject of the assertion\nto be the value of that property from the original object. This\npermits for further chainable assertions on that property.\n\n    expect(obj).to.have.property('foo')\n      .that.is.a('string');\n    expect(deepObj).to.have.property('green')\n      .that.is.an('object')\n      .that.deep.equals({ tea: 'matcha' });\n    expect(deepObj).to.have.property('teas')\n      .that.is.an('array')\n      .with.deep.property('[2]')\n        .that.deep.equals({ tea: 'konacha' });",
            "line": " test\\lib\\chai.js:1644"
        },
        {
            "message": "Missing item type\n### .ownProperty(name)\n\nAsserts that the target has an own property `name`.\n\n    expect('test').to.have.ownProperty('length');",
            "line": " test\\lib\\chai.js:1739"
        },
        {
            "message": "Missing item type\n### .length(value)\n\nAsserts that the target's `length` property has\nthe expected value.\n\n    expect([ 1, 2, 3]).to.have.length(3);\n    expect('foobar').to.have.length(6);\n\nCan also be used as a chain precursor to a value\ncomparison for the length property.\n\n    expect('foo').to.have.length.above(2);\n    expect([ 1, 2, 3 ]).to.have.length.above(2);\n    expect('foo').to.have.length.below(4);\n    expect([ 1, 2, 3 ]).to.have.length.below(4);\n    expect('foo').to.have.length.within(2,4);\n    expect([ 1, 2, 3 ]).to.have.length.within(2,4);",
            "line": " test\\lib\\chai.js:1766"
        },
        {
            "message": "Missing item type\n### .match(regexp)\n\nAsserts that the target matches a regular expression.\n\n    expect('foobar').to.match(/^foo/);",
            "line": " test\\lib\\chai.js:1814"
        },
        {
            "message": "Missing item type\n### .string(string)\n\nAsserts that the string target contains another string.\n\n    expect('foobar').to.have.string('bar');",
            "line": " test\\lib\\chai.js:1837"
        },
        {
            "message": "Missing item type\n### .keys(key1, [key2], [...])\n\nAsserts that the target has exactly the given keys, or\nasserts the inclusion of some keys when using the\n`include` or `contain` modifiers.\n\n    expect({ foo: 1, bar: 2 }).to.have.keys(['foo', 'bar']);\n    expect({ foo: 1, bar: 2, baz: 3 }).to.contain.keys('foo', 'bar');",
            "line": " test\\lib\\chai.js:1863"
        },
        {
            "message": "Missing item type\n### .throw(constructor)\n\nAsserts that the function target will throw a specific error, or specific type of error\n(as determined using `instanceof`), optionally with a RegExp or string inclusion test\nfor the error's message.\n\n    var err = new ReferenceError('This is a bad function.');\n    var fn = function () { throw err; }\n    expect(fn).to.throw(ReferenceError);\n    expect(fn).to.throw(Error);\n    expect(fn).to.throw(/bad function/);\n    expect(fn).to.not.throw('good function');\n    expect(fn).to.throw(ReferenceError, /bad function/);\n    expect(fn).to.throw(err);\n    expect(fn).to.not.throw(new RangeError('Out of range.'));\n\nPlease note that when a throw expectation is negated, it will check each\nparameter independently, starting with error constructor type. The appropriate way\nto check for the existence of a type of error but for a message that does not match\nis to use `and`.\n\n    expect(fn).to.throw(ReferenceError)\n       .and.not.throw(/good function/);",
            "line": " test\\lib\\chai.js:1931"
        },
        {
            "message": "Missing item type\n### .respondTo(method)\n\nAsserts that the object or class target will respond to a method.\n\n    Klass.prototype.bar = function(){};\n    expect(Klass).to.respondTo('bar');\n    expect(obj).to.respondTo('bar');\n\nTo check if a constructor will respond to a static function,\nset the `itself` flag.\n\n    Klass.baz = function(){};\n    expect(Klass).itself.to.respondTo('baz');",
            "line": " test\\lib\\chai.js:2088"
        },
        {
            "message": "Missing item type\n### .itself\n\nSets the `itself` flag, later used by the `respondTo` assertion.\n\n    function Foo() {}\n    Foo.bar = function() {}\n    Foo.prototype.baz = function() {}\n\n    expect(Foo).itself.to.respondTo('bar');\n    expect(Foo).itself.not.to.respondTo('baz');",
            "line": " test\\lib\\chai.js:2124"
        },
        {
            "message": "Missing item type\n### .satisfy(method)\n\nAsserts that the target passes a given truth test.\n\n    expect(1).to.satisfy(function(num) { return num > 0; });",
            "line": " test\\lib\\chai.js:2144"
        },
        {
            "message": "Missing item type\n### .closeTo(expected, delta)\n\nAsserts that the target is equal `expected`, to within a +/- `delta` range.\n\n    expect(1.5).to.be.closeTo(1, 0.5);",
            "line": " test\\lib\\chai.js:2169"
        },
        {
            "message": "Missing item type\n### .members(set)\n\nAsserts that the target is a superset of `set`,\nor that the target and `set` have the same members.\n\n    expect([1, 2, 3]).to.include.members([3, 2]);\n    expect([1, 2, 3]).to.not.include.members([3, 2, 8]);\n\n    expect([4, 2]).to.have.members([2, 4]);\n    expect([5, 2]).to.not.have.members([5, 2, 1]);",
            "line": " test\\lib\\chai.js:2199"
        },
        {
            "message": "Missing item type\n### assert(expression, message)\n\nWrite your own test expressions.\n\n    assert('foo' !== 'bar', 'foo is not bar');\n    assert(Array.isArray([]), 'empty arrays are arrays');",
            "line": " test\\lib\\chai.js:2266"
        },
        {
            "message": "Missing item type\n### .fail(actual, expected, [message], [operator])\n\nThrow a failure. Node.js `assert` module-compatible.",
            "line": " test\\lib\\chai.js:2289"
        },
        {
            "message": "Missing item type\n### .ok(object, [message])\n\nAsserts that `object` is truthy.\n\n    assert.ok('everything', 'everything is ok');\n    assert.ok(false, 'this will fail');",
            "line": " test\\lib\\chai.js:2311"
        },
        {
            "message": "Missing item type\n### .notOk(object, [message])\n\nAsserts that `object` is falsy.\n\n    assert.notOk('everything', 'this will fail');\n    assert.notOk(false, 'this will pass');",
            "line": " test\\lib\\chai.js:2329"
        },
        {
            "message": "Missing item type\n### .equal(actual, expected, [message])\n\nAsserts non-strict equality (`==`) of `actual` and `expected`.\n\n    assert.equal(3, '3', '== coerces values to strings');",
            "line": " test\\lib\\chai.js:2347"
        },
        {
            "message": "Missing item type\n### .notEqual(actual, expected, [message])\n\nAsserts non-strict inequality (`!=`) of `actual` and `expected`.\n\n    assert.notEqual(3, 4, 'these numbers are not equal');",
            "line": " test\\lib\\chai.js:2373"
        },
        {
            "message": "Missing item type\n### .strictEqual(actual, expected, [message])\n\nAsserts strict equality (`===`) of `actual` and `expected`.\n\n    assert.strictEqual(true, true, 'these booleans are strictly equal');",
            "line": " test\\lib\\chai.js:2399"
        },
        {
            "message": "Missing item type\n### .notStrictEqual(actual, expected, [message])\n\nAsserts strict inequality (`!==`) of `actual` and `expected`.\n\n    assert.notStrictEqual(3, '3', 'no coercion for strict equality');",
            "line": " test\\lib\\chai.js:2417"
        },
        {
            "message": "Missing item type\n### .deepEqual(actual, expected, [message])\n\nAsserts that `actual` is deeply equal to `expected`.\n\n    assert.deepEqual({ tea: 'green' }, { tea: 'green' });",
            "line": " test\\lib\\chai.js:2435"
        },
        {
            "message": "Missing item type\n### .notDeepEqual(actual, expected, [message])\n\nAssert that `actual` is not deeply equal to `expected`.\n\n    assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });",
            "line": " test\\lib\\chai.js:2453"
        },
        {
            "message": "Missing item type\n### .isTrue(value, [message])\n\nAsserts that `value` is true.\n\n    var teaServed = true;\n    assert.isTrue(teaServed, 'the tea has been served');",
            "line": " test\\lib\\chai.js:2471"
        },
        {
            "message": "Missing item type\n### .isFalse(value, [message])\n\nAsserts that `value` is false.\n\n    var teaServed = false;\n    assert.isFalse(teaServed, 'no tea yet? hmm...');",
            "line": " test\\lib\\chai.js:2489"
        },
        {
            "message": "Missing item type\n### .isNull(value, [message])\n\nAsserts that `value` is null.\n\n    assert.isNull(err, 'there was no error');",
            "line": " test\\lib\\chai.js:2507"
        },
        {
            "message": "Missing item type\n### .isNotNull(value, [message])\n\nAsserts that `value` is not null.\n\n    var tea = 'tasty chai';\n    assert.isNotNull(tea, 'great, time for tea!');",
            "line": " test\\lib\\chai.js:2524"
        },
        {
            "message": "Missing item type\n### .isUndefined(value, [message])\n\nAsserts that `value` is `undefined`.\n\n    var tea;\n    assert.isUndefined(tea, 'no tea defined');",
            "line": " test\\lib\\chai.js:2542"
        },
        {
            "message": "Missing item type\n### .isDefined(value, [message])\n\nAsserts that `value` is not `undefined`.\n\n    var tea = 'cup of chai';\n    assert.isDefined(tea, 'tea has been defined');",
            "line": " test\\lib\\chai.js:2560"
        },
        {
            "message": "Missing item type\n### .isFunction(value, [message])\n\nAsserts that `value` is a function.\n\n    function serveTea() { return 'cup of tea'; };\n    assert.isFunction(serveTea, 'great, we can have tea now');",
            "line": " test\\lib\\chai.js:2578"
        },
        {
            "message": "Missing item type\n### .isNotFunction(value, [message])\n\nAsserts that `value` is _not_ a function.\n\n    var serveTea = [ 'heat', 'pour', 'sip' ];\n    assert.isNotFunction(serveTea, 'great, we have listed the steps');",
            "line": " test\\lib\\chai.js:2596"
        },
        {
            "message": "Missing item type\n### .isObject(value, [message])\n\nAsserts that `value` is an object (as revealed by\n`Object.prototype.toString`).\n\n    var selection = { name: 'Chai', serve: 'with spices' };\n    assert.isObject(selection, 'tea selection is an object');",
            "line": " test\\lib\\chai.js:2614"
        },
        {
            "message": "Missing item type\n### .isNotObject(value, [message])\n\nAsserts that `value` is _not_ an object.\n\n    var selection = 'chai'\n    assert.isObject(selection, 'tea selection is not an object');\n    assert.isObject(null, 'null is not an object');",
            "line": " test\\lib\\chai.js:2633"
        },
        {
            "message": "Missing item type\n### .isArray(value, [message])\n\nAsserts that `value` is an array.\n\n    var menu = [ 'green', 'chai', 'oolong' ];\n    assert.isArray(menu, 'what kind of tea do we want?');",
            "line": " test\\lib\\chai.js:2652"
        },
        {
            "message": "Missing item type\n### .isNotArray(value, [message])\n\nAsserts that `value` is _not_ an array.\n\n    var menu = 'green|chai|oolong';\n    assert.isNotArray(menu, 'what kind of tea do we want?');",
            "line": " test\\lib\\chai.js:2670"
        },
        {
            "message": "Missing item type\n### .isString(value, [message])\n\nAsserts that `value` is a string.\n\n    var teaOrder = 'chai';\n    assert.isString(teaOrder, 'order placed');",
            "line": " test\\lib\\chai.js:2688"
        },
        {
            "message": "Missing item type\n### .isNotString(value, [message])\n\nAsserts that `value` is _not_ a string.\n\n    var teaOrder = 4;\n    assert.isNotString(teaOrder, 'order placed');",
            "line": " test\\lib\\chai.js:2706"
        },
        {
            "message": "Missing item type\n### .isNumber(value, [message])\n\nAsserts that `value` is a number.\n\n    var cups = 2;\n    assert.isNumber(cups, 'how many cups');",
            "line": " test\\lib\\chai.js:2724"
        },
        {
            "message": "Missing item type\n### .isNotNumber(value, [message])\n\nAsserts that `value` is _not_ a number.\n\n    var cups = '2 cups please';\n    assert.isNotNumber(cups, 'how many cups');",
            "line": " test\\lib\\chai.js:2742"
        },
        {
            "message": "Missing item type\n### .isBoolean(value, [message])\n\nAsserts that `value` is a boolean.\n\n    var teaReady = true\n      , teaServed = false;\n\n    assert.isBoolean(teaReady, 'is the tea ready');\n    assert.isBoolean(teaServed, 'has tea been served');",
            "line": " test\\lib\\chai.js:2760"
        },
        {
            "message": "Missing item type\n### .isNotBoolean(value, [message])\n\nAsserts that `value` is _not_ a boolean.\n\n    var teaReady = 'yep'\n      , teaServed = 'nope';\n\n    assert.isNotBoolean(teaReady, 'is the tea ready');\n    assert.isNotBoolean(teaServed, 'has tea been served');",
            "line": " test\\lib\\chai.js:2781"
        },
        {
            "message": "Missing item type\n### .typeOf(value, name, [message])\n\nAsserts that `value`'s type is `name`, as determined by\n`Object.prototype.toString`.\n\n    assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\n    assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\n    assert.typeOf('tea', 'string', 'we have a string');\n    assert.typeOf(/tea/, 'regexp', 'we have a regular expression');\n    assert.typeOf(null, 'null', 'we have a null');\n    assert.typeOf(undefined, 'undefined', 'we have an undefined');",
            "line": " test\\lib\\chai.js:2802"
        },
        {
            "message": "Missing item type\n### .notTypeOf(value, name, [message])\n\nAsserts that `value`'s type is _not_ `name`, as determined by\n`Object.prototype.toString`.\n\n    assert.notTypeOf('tea', 'number', 'strings are not numbers');",
            "line": " test\\lib\\chai.js:2826"
        },
        {
            "message": "Missing item type\n### .instanceOf(object, constructor, [message])\n\nAsserts that `value` is an instance of `constructor`.\n\n    var Tea = function (name) { this.name = name; }\n      , chai = new Tea('chai');\n\n    assert.instanceOf(chai, Tea, 'chai is an instance of tea');",
            "line": " test\\lib\\chai.js:2845"
        },
        {
            "message": "Missing item type\n### .notInstanceOf(object, constructor, [message])\n\nAsserts `value` is not an instance of `constructor`.\n\n    var Tea = function (name) { this.name = name; }\n      , chai = new String('chai');\n\n    assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');",
            "line": " test\\lib\\chai.js:2866"
        },
        {
            "message": "Missing item type\n### .include(haystack, needle, [message])\n\nAsserts that `haystack` includes `needle`. Works\nfor strings and arrays.\n\n    assert.include('foobar', 'bar', 'foobar contains string \"bar\"');\n    assert.include([ 1, 2, 3 ], 3, 'array contains value');",
            "line": " test\\lib\\chai.js:2887"
        },
        {
            "message": "Missing item type\n### .notInclude(haystack, needle, [message])\n\nAsserts that `haystack` does not include `needle`. Works\nfor strings and arrays.\ni\n    assert.notInclude('foobar', 'baz', 'string not include substring');\n    assert.notInclude([ 1, 2, 3 ], 4, 'array not include contain value');",
            "line": " test\\lib\\chai.js:2907"
        },
        {
            "message": "Missing item type\n### .match(value, regexp, [message])\n\nAsserts that `value` matches the regular expression `regexp`.\n\n    assert.match('foobar', /^foo/, 'regexp matches');",
            "line": " test\\lib\\chai.js:2927"
        },
        {
            "message": "Missing item type\n### .notMatch(value, regexp, [message])\n\nAsserts that `value` does not match the regular expression `regexp`.\n\n    assert.notMatch('foobar', /^foo/, 'regexp does not match');",
            "line": " test\\lib\\chai.js:2945"
        },
        {
            "message": "Missing item type\n### .property(object, property, [message])\n\nAsserts that `object` has a property named by `property`.\n\n    assert.property({ tea: { green: 'matcha' }}, 'tea');",
            "line": " test\\lib\\chai.js:2963"
        },
        {
            "message": "Missing item type\n### .notProperty(object, property, [message])\n\nAsserts that `object` does _not_ have a property named by `property`.\n\n    assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');",
            "line": " test\\lib\\chai.js:2981"
        },
        {
            "message": "Missing item type\n### .deepProperty(object, property, [message])\n\nAsserts that `object` has a property named by `property`, which can be a\nstring using dot- and bracket-notation for deep reference.\n\n    assert.deepProperty({ tea: { green: 'matcha' }}, 'tea.green');",
            "line": " test\\lib\\chai.js:2999"
        },
        {
            "message": "Missing item type\n### .notDeepProperty(object, property, [message])\n\nAsserts that `object` does _not_ have a property named by `property`, which\ncan be a string using dot- and bracket-notation for deep reference.\n\n    assert.notDeepProperty({ tea: { green: 'matcha' }}, 'tea.oolong');",
            "line": " test\\lib\\chai.js:3018"
        },
        {
            "message": "Missing item type\n### .propertyVal(object, property, value, [message])\n\nAsserts that `object` has a property named by `property` with value given\nby `value`.\n\n    assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');",
            "line": " test\\lib\\chai.js:3037"
        },
        {
            "message": "Missing item type\n### .propertyNotVal(object, property, value, [message])\n\nAsserts that `object` has a property named by `property`, but with a value\ndifferent from that given by `value`.\n\n    assert.propertyNotVal({ tea: 'is good' }, 'tea', 'is bad');",
            "line": " test\\lib\\chai.js:3057"
        },
        {
            "message": "Missing item type\n### .deepPropertyVal(object, property, value, [message])\n\nAsserts that `object` has a property named by `property` with value given\nby `value`. `property` can use dot- and bracket-notation for deep\nreference.\n\n    assert.deepPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');",
            "line": " test\\lib\\chai.js:3077"
        },
        {
            "message": "Missing item type\n### .deepPropertyNotVal(object, property, value, [message])\n\nAsserts that `object` has a property named by `property`, but with a value\ndifferent from that given by `value`. `property` can use dot- and\nbracket-notation for deep reference.\n\n    assert.deepPropertyNotVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');",
            "line": " test\\lib\\chai.js:3098"
        },
        {
            "message": "Missing item type\n### .lengthOf(object, length, [message])\n\nAsserts that `object` has a `length` property with the expected value.\n\n    assert.lengthOf([1,2,3], 3, 'array has length of 3');\n    assert.lengthOf('foobar', 5, 'string has length of 6');",
            "line": " test\\lib\\chai.js:3119"
        },
        {
            "message": "Missing item type\n### .throws(function, [constructor/string/regexp], [string/regexp], [message])\n\nAsserts that `function` will throw an error that is an instance of\n`constructor`, or alternately that it will throw an error with message\nmatching `regexp`.\n\n    assert.throw(fn, 'function throws a reference error');\n    assert.throw(fn, /function throws a reference error/);\n    assert.throw(fn, ReferenceError);\n    assert.throw(fn, ReferenceError, 'function throws a reference error');\n    assert.throw(fn, ReferenceError, /function throws a reference error/);",
            "line": " test\\lib\\chai.js:3138"
        },
        {
            "message": "Missing item type\n### .doesNotThrow(function, [constructor/regexp], [message])\n\nAsserts that `function` will _not_ throw an error that is an instance of\n`constructor`, or alternately that it will not throw an error with message\nmatching `regexp`.\n\n    assert.doesNotThrow(fn, Error, 'function does not throw');",
            "line": " test\\lib\\chai.js:3172"
        },
        {
            "message": "Missing item type\n### .operator(val1, operator, val2, [message])\n\nCompares two values using `operator`.\n\n    assert.operator(1, '<', 2, 'everything is ok');\n    assert.operator(1, '>', 2, 'this will fail');",
            "line": " test\\lib\\chai.js:3199"
        },
        {
            "message": "Missing item type\n### .closeTo(actual, expected, delta, [message])\n\nAsserts that the target is equal `expected`, to within a +/- `delta` range.\n\n    assert.closeTo(1.5, 1, 0.5, 'numbers are close');",
            "line": " test\\lib\\chai.js:3226"
        },
        {
            "message": "Missing item type\n### .sameMembers(set1, set2, [message])\n\nAsserts that `set1` and `set2` have the same members.\nOrder is not taken into account.\n\n    assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');",
            "line": " test\\lib\\chai.js:3245"
        },
        {
            "message": "Missing item type\n### .includeMembers(superset, subset, [message])\n\nAsserts that `subset` is included in `superset`.\nOrder is not taken into account.\n\n    assert.includeMembers([ 1, 2, 3 ], [ 2, 1 ], 'include members');",
            "line": " test\\lib\\chai.js:3264"
        },
        {
            "message": "Missing item type\n### addChainableMethod (ctx, name, method, chainingBehavior)\n\nAdds a method to an object, such that the method can also be chained.\n\n    utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n      var obj = utils.flag(this, 'object');\n      new chai.Assertion(obj).to.be.equal(str);\n    });\n\nCan also be accessed directly from `chai.Assertion`.\n\n    chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n\nThe result can then be used as both a method assertion, executing both `method` and\n`chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n\n    expect(fooStr).to.be.foo('bar');\n    expect(fooStr).to.be.foo.equal('foo');",
            "line": " test\\lib\\chai.js:3427"
        },
        {
            "message": "Missing item type\n### .addMethod (ctx, name, method)\n\nAdds a method to the prototype of an object.\n\n    utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {\n      var obj = utils.flag(this, 'object');\n      new chai.Assertion(obj).to.be.equal(str);\n    });\n\nCan also be accessed directly from `chai.Assertion`.\n\n    chai.Assertion.addMethod('foo', fn);\n\nThen can be used as any other assertion.\n\n    expect(fooStr).to.be.foo('bar');",
            "line": " test\\lib\\chai.js:3514"
        },
        {
            "message": "Missing item type\n### addProperty (ctx, name, getter)\n\nAdds a property to the prototype of an object.\n\n    utils.addProperty(chai.Assertion.prototype, 'foo', function () {\n      var obj = utils.flag(this, 'object');\n      new chai.Assertion(obj).to.be.instanceof(Foo);\n    });\n\nCan also be accessed directly from `chai.Assertion`.\n\n    chai.Assertion.addProperty('foo', fn);\n\nThen can be used as any other assertion.\n\n    expect(myFoo).to.be.foo;",
            "line": " test\\lib\\chai.js:3554"
        },
        {
            "message": "Missing item type\n### flag(object ,key, [value])\n\nGet or set a flag value on an object. If a\nvalue is provided it will be set, else it will\nreturn the currently set value or `undefined` if\nthe value is not set.\n\n    utils.flag(this, 'foo', 'bar'); // setter\n    utils.flag(this, 'foo'); // getter, returns `bar`",
            "line": " test\\lib\\chai.js:3597"
        },
        {
            "message": "Missing item type\n# getActual(object, [actual])\n\nReturns the `actual` value for an Assertion",
            "line": " test\\lib\\chai.js:3632"
        },
        {
            "message": "Missing item type\n### .getEnumerableProperties(object)\n\nThis allows the retrieval of enumerable property names of an object,\ninherited or not.",
            "line": " test\\lib\\chai.js:3654"
        },
        {
            "message": "Missing item type\n### .getMessage(object, message, negateMessage)\n\nConstruct the error message based on flags\nand template tags. Template tags will return\na stringified inspection of the object referenced.\n\nMessage template tags:\n- `#{this}` current asserted object\n- `#{act}` actual value\n- `#{exp}` expected value",
            "line": " test\\lib\\chai.js:3691"
        },
        {
            "message": "Missing item type\n# getName(func)\n\nGets the name of a function, in a cross-browser way.",
            "line": " test\\lib\\chai.js:3734"
        },
        {
            "message": "Missing item type\n### .getPathValue(path, object)\n\nThis allows the retrieval of values in an\nobject given a string path.\n\n    var obj = {\n        prop1: {\n            arr: ['a', 'b', 'c']\n          , str: 'Hello'\n        }\n      , prop2: {\n            arr: [ { nested: 'Universe' } ]\n          , str: 'Hello again!'\n        }\n    }\n\nThe following would be the results.\n\n    getPathValue('prop1.str', obj); // Hello\n    getPathValue('prop1.att[2]', obj); // b\n    getPathValue('prop2.arr[0].nested', obj); // Universe",
            "line": " test\\lib\\chai.js:3758"
        },
        {
            "message": "Missing item type\n### .getProperties(object)\n\nThis allows the retrieval of property names of an object, enumerable or not,\ninherited or not.",
            "line": " test\\lib\\chai.js:3862"
        },
        {
            "message": "Missing item type\nEchos the value of a value. Trys to print the value out\nin the best way possible given the different types.",
            "line": " test\\lib\\chai.js:4020"
        },
        {
            "message": "Missing item type\n### .objDisplay (object)\n\nDetermines if an object or an array matches\ncriteria to be inspected in-line for error\nmessages or should be truncated.",
            "line": " test\\lib\\chai.js:4346"
        },
        {
            "message": "Missing item type\n### overwriteMethod (ctx, name, fn)\n\nOverwites an already existing method and provides\naccess to previous function. Must return function\nto be used for name.\n\n    utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\n      return function (str) {\n        var obj = utils.flag(this, 'object');\n        if (obj instanceof Foo) {\n          new chai.Assertion(obj.value).to.equal(str);\n        } else {\n          _super.apply(this, arguments);\n        }\n      }\n    });\n\nCan also be accessed directly from `chai.Assertion`.\n\n    chai.Assertion.overwriteMethod('foo', fn);\n\nThen can be used as any other assertion.\n\n    expect(myFoo).to.equal('bar');",
            "line": " test\\lib\\chai.js:4391"
        },
        {
            "message": "Missing item type\n### overwriteProperty (ctx, name, fn)\n\nOverwites an already existing property getter and provides\naccess to previous value. Must return function to use as getter.\n\n    utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n      return function () {\n        var obj = utils.flag(this, 'object');\n        if (obj instanceof Foo) {\n          new chai.Assertion(obj.name).to.equal('bar');\n        } else {\n          _super.call(this);\n        }\n      }\n    });\n\n\nCan also be accessed directly from `chai.Assertion`.\n\n    chai.Assertion.overwriteProperty('foo', fn);\n\nThen can be used as any other assertion.\n\n    expect(myFoo).to.be.ok;",
            "line": " test\\lib\\chai.js:4445"
        },
        {
            "message": "Missing item type\n### overwriteChainableMethod (ctx, name, fn)\n\nOverwites an already existing chainable method\nand provides access to the previous function or\nproperty.  Must return functions to be used for\nname.\n\n    utils.overwriteChainableMethod(chai.Assertion.prototype, 'length',\n      function (_super) {\n      }\n    , function (_super) {\n      }\n    );\n\nCan also be accessed directly from `chai.Assertion`.\n\n    chai.Assertion.overwriteChainableMethod('foo', fn, fn);\n\nThen can be used as any other assertion.\n\n    expect(myFoo).to.have.length(3);\n    expect(myFoo).to.have.length.above(3);",
            "line": " test\\lib\\chai.js:4502"
        },
        {
            "message": "Missing item type\n# test(object, expression)\n\nTest and object for expression.",
            "line": " test\\lib\\chai.js:4564"
        },
        {
            "message": "Missing item type\n### transferFlags(assertion, object, includeAll = true)\n\nTransfer all the flags for `assertion` to `object`. If\n`includeAll` is set to `false`, then the base Chai\nassertion flags (namely `object`, `ssfi`, and `message`)\nwill not be transferred.\n\n\n    var newAssertion = new Assertion();\n    utils.transferFlags(assertion, newAssertion);\n\n    var anotherAsseriton = new Assertion(myObj);\n    utils.transferFlags(assertion, anotherAssertion, false);",
            "line": " test\\lib\\chai.js:4587"
        },
        {
            "message": "Missing item type\n### type(object)\n\nBetter implementation of `typeof` detection that can\nbe used cross-browser. Handles the inconsistencies of\nArray, `null`, and `undefined` detection.\n\n    utils.type({}) // 'object'\n    utils.type(null) // `null'\n    utils.type(undefined) // `undefined`\n    utils.type([]) // `array`",
            "line": " test\\lib\\chai.js:4648"
        },
        {
            "message": "Missing item type\nModule exports.",
            "line": " test\\lib\\mocha.js:419"
        },
        {
            "message": "Missing item type\nCheck if `obj` is an array.",
            "line": " test\\lib\\mocha.js:425"
        },
        {
            "message": "Missing item type\nEvent emitter constructor.",
            "line": " test\\lib\\mocha.js:433"
        },
        {
            "message": "Missing item type\nAdds a listener.",
            "line": " test\\lib\\mocha.js:441"
        },
        {
            "message": "Missing item type\nAdds a volatile listener.",
            "line": " test\\lib\\mocha.js:465"
        },
        {
            "message": "Missing item type\nRemoves a listener.",
            "line": " test\\lib\\mocha.js:485"
        },
        {
            "message": "Missing item type\nRemoves all listeners for an event.",
            "line": " test\\lib\\mocha.js:522"
        },
        {
            "message": "Missing item type\nGets all listeners for a certain event.",
            "line": " test\\lib\\mocha.js:541"
        },
        {
            "message": "Missing item type\nEmits an event.",
            "line": " test\\lib\\mocha.js:563"
        },
        {
            "message": "Missing item type\nExpose `Progress`.",
            "line": " test\\lib\\mocha.js:607"
        },
        {
            "message": "Missing item type\nInitialize a new `Progress` indicator.",
            "line": " test\\lib\\mocha.js:613"
        },
        {
            "message": "Missing item type\nSet progress size to `n`.",
            "line": " test\\lib\\mocha.js:624"
        },
        {
            "message": "Missing item type\nSet text to `str`.",
            "line": " test\\lib\\mocha.js:637"
        },
        {
            "message": "Missing item type\nSet font size to `n`.",
            "line": " test\\lib\\mocha.js:650"
        },
        {
            "message": "Missing item type\nSet font `family`.",
            "line": " test\\lib\\mocha.js:663"
        },
        {
            "message": "Missing item type\nUpdate percentage to `n`.",
            "line": " test\\lib\\mocha.js:675"
        },
        {
            "message": "Missing item type\nDraw on `ctx`.",
            "line": " test\\lib\\mocha.js:687"
        },
        {
            "message": "Missing item type\nExpose `Context`.",
            "line": " test\\lib\\mocha.js:754"
        },
        {
            "message": "Missing item type\nInitialize a new `Context`.",
            "line": " test\\lib\\mocha.js:760"
        },
        {
            "message": "Missing item type\nSet or get the context `Runnable` to `runnable`.",
            "line": " test\\lib\\mocha.js:768"
        },
        {
            "message": "Missing item type\nSet test timeout `ms`.",
            "line": " test\\lib\\mocha.js:782"
        },
        {
            "message": "Missing item type\nSet test slowness threshold `ms`.",
            "line": " test\\lib\\mocha.js:795"
        },
        {
            "message": "Missing item type\nInspect the context void of `._runnable`.",
            "line": " test\\lib\\mocha.js:808"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " test\\lib\\mocha.js:827"
        },
        {
            "message": "Missing item type\nExpose `Hook`.",
            "line": " test\\lib\\mocha.js:833"
        },
        {
            "message": "Missing item type\nInitialize a new `Hook` with the given `title` and callback `fn`.",
            "line": " test\\lib\\mocha.js:839"
        },
        {
            "message": "Missing item type\nInherit from `Runnable.prototype`.",
            "line": " test\\lib\\mocha.js:852"
        },
        {
            "message": "Missing item type\nGet or set the test `err`.",
            "line": " test\\lib\\mocha.js:862"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " test\\lib\\mocha.js:884"
        },
        {
            "message": "Missing item type\nBDD-style interface:\n\n     describe('Array', function(){\n       describe('#indexOf()', function(){\n         it('should return -1 when not present', function(){\n\n         });\n\n         it('should return the index when present', function(){\n\n         });\n       });\n     });",
            "line": " test\\lib\\mocha.js:892"
        },
        {
            "message": "Missing item type\nExecute before running tests.",
            "line": " test\\lib\\mocha.js:914"
        },
        {
            "message": "Missing item type\nExecute after running tests.",
            "line": " test\\lib\\mocha.js:922"
        },
        {
            "message": "Missing item type\nExecute before each test case.",
            "line": " test\\lib\\mocha.js:930"
        },
        {
            "message": "Missing item type\nExecute after each test case.",
            "line": " test\\lib\\mocha.js:938"
        },
        {
            "message": "Missing item type\nDescribe a \"suite\" with the given `title`\nand callback `fn` containing nested suites\nand/or tests.",
            "line": " test\\lib\\mocha.js:946"
        },
        {
            "message": "Missing item type\nPending describe.",
            "line": " test\\lib\\mocha.js:960"
        },
        {
            "message": "Missing item type\nExclusive suite.",
            "line": " test\\lib\\mocha.js:974"
        },
        {
            "message": "Missing item type\nDescribe a specification or test-case\nwith the given `title` and callback `fn`\nacting as a thunk.",
            "line": " test\\lib\\mocha.js:984"
        },
        {
            "message": "Missing item type\nExclusive test-case.",
            "line": " test\\lib\\mocha.js:998"
        },
        {
            "message": "Missing item type\nPending test case.",
            "line": " test\\lib\\mocha.js:1009"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " test\\lib\\mocha.js:1025"
        },
        {
            "message": "Missing item type\nTDD-style interface:\n\n    exports.Array = {\n      '#indexOf()': {\n        'should return -1 when the value is not present': function(){\n\n        },\n\n        'should return the correct index when the value is present': function(){\n\n        }\n      }\n    };",
            "line": " test\\lib\\mocha.js:1032"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " test\\lib\\mocha.js:1098"
        },
        {
            "message": "Missing item type\nQUnit-style interface:\n\n    suite('Array');\n\n    test('#length', function(){\n      var arr = [1,2,3];\n      ok(arr.length == 3);\n    });\n\n    test('#indexOf()', function(){\n      var arr = [1,2,3];\n      ok(arr.indexOf(1) == 0);\n      ok(arr.indexOf(2) == 1);\n      ok(arr.indexOf(3) == 2);\n    });\n\n    suite('String');\n\n    test('#length', function(){\n      ok('foo'.length == 3);\n    });",
            "line": " test\\lib\\mocha.js:1106"
        },
        {
            "message": "Missing item type\nExecute before running tests.",
            "line": " test\\lib\\mocha.js:1136"
        },
        {
            "message": "Missing item type\nExecute after running tests.",
            "line": " test\\lib\\mocha.js:1144"
        },
        {
            "message": "Missing item type\nExecute before each test case.",
            "line": " test\\lib\\mocha.js:1152"
        },
        {
            "message": "Missing item type\nExecute after each test case.",
            "line": " test\\lib\\mocha.js:1160"
        },
        {
            "message": "Missing item type\nDescribe a \"suite\" with the given `title`.",
            "line": " test\\lib\\mocha.js:1168"
        },
        {
            "message": "Missing item type\nExclusive test-case.",
            "line": " test\\lib\\mocha.js:1179"
        },
        {
            "message": "Missing item type\nDescribe a specification or test-case\nwith the given `title` and callback `fn`\nacting as a thunk.",
            "line": " test\\lib\\mocha.js:1188"
        },
        {
            "message": "Missing item type\nExclusive test-case.",
            "line": " test\\lib\\mocha.js:1200"
        },
        {
            "message": "Missing item type\nPending test case.",
            "line": " test\\lib\\mocha.js:1210"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " test\\lib\\mocha.js:1224"
        },
        {
            "message": "Missing item type\nTDD-style interface:\n\n     suite('Array', function(){\n       suite('#indexOf()', function(){\n         suiteSetup(function(){\n\n         });\n\n         test('should return -1 when not present', function(){\n\n         });\n\n         test('should return the index when present', function(){\n\n         });\n\n         suiteTeardown(function(){\n\n         });\n       });\n     });",
            "line": " test\\lib\\mocha.js:1232"
        },
        {
            "message": "Missing item type\nExecute before each test case.",
            "line": " test\\lib\\mocha.js:1262"
        },
        {
            "message": "Missing item type\nExecute after each test case.",
            "line": " test\\lib\\mocha.js:1270"
        },
        {
            "message": "Missing item type\nExecute before the suite.",
            "line": " test\\lib\\mocha.js:1278"
        },
        {
            "message": "Missing item type\nExecute after the suite.",
            "line": " test\\lib\\mocha.js:1286"
        },
        {
            "message": "Missing item type\nDescribe a \"suite\" with the given `title`\nand callback `fn` containing nested suites\nand/or tests.",
            "line": " test\\lib\\mocha.js:1294"
        },
        {
            "message": "Missing item type\nPending suite.",
            "line": " test\\lib\\mocha.js:1308"
        },
        {
            "message": "Missing item type\nExclusive test-case.",
            "line": " test\\lib\\mocha.js:1319"
        },
        {
            "message": "Missing item type\nDescribe a specification or test-case\nwith the given `title` and callback `fn`\nacting as a thunk.",
            "line": " test\\lib\\mocha.js:1328"
        },
        {
            "message": "Missing item type\nExclusive test-case.",
            "line": " test\\lib\\mocha.js:1342"
        },
        {
            "message": "Missing item type\nPending test case.",
            "line": " test\\lib\\mocha.js:1352"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " test\\lib\\mocha.js:1371"
        },
        {
            "message": "Missing item type\nExpose `Mocha`.",
            "line": " test\\lib\\mocha.js:1378"
        },
        {
            "message": "Missing item type\nExpose internals.",
            "line": " test\\lib\\mocha.js:1384"
        },
        {
            "message": "Missing item type\nReturn image `name` path.",
            "line": " test\\lib\\mocha.js:1398"
        },
        {
            "message": "Missing item type\nSetup mocha with `options`.\n\nOptions:\n\n  - `ui` name \"bdd\", \"tdd\", \"exports\" etc\n  - `reporter` reporter instance, defaults to `mocha.reporters.Dot`\n  - `globals` array of accepted globals\n  - `timeout` timeout in milliseconds\n  - `bail` bail on the first test failure\n  - `slow` milliseconds to wait before considering a test slow\n  - `ignoreLeaks` ignore global leaks\n  - `grep` string or regexp to filter tests with",
            "line": " test\\lib\\mocha.js:1410"
        },
        {
            "message": "Missing item type\nEnable or disable bailing on the first failure.",
            "line": " test\\lib\\mocha.js:1457"
        },
        {
            "message": "Missing item type\nAdd test `file`.",
            "line": " test\\lib\\mocha.js:1470"
        },
        {
            "message": "Missing item type\nSet reporter to `reporter`, defaults to \"dot\".",
            "line": " test\\lib\\mocha.js:1482"
        },
        {
            "message": "Missing item type\nSet test UI `name`, defaults to \"bdd\".",
            "line": " test\\lib\\mocha.js:1507"
        },
        {
            "message": "Missing item type\nLoad registered files.",
            "line": " test\\lib\\mocha.js:1523"
        },
        {
            "message": "Missing item type\nEnable growl support.",
            "line": " test\\lib\\mocha.js:1542"
        },
        {
            "message": "Missing item type\nAdd regexp to grep, if `re` is a string it is escaped.",
            "line": " test\\lib\\mocha.js:1566"
        },
        {
            "message": "Missing item type\nInvert `.grep()` matches.",
            "line": " test\\lib\\mocha.js:1581"
        },
        {
            "message": "Missing item type\nIgnore global leaks.",
            "line": " test\\lib\\mocha.js:1593"
        },
        {
            "message": "Missing item type\nEnable global leak checking.",
            "line": " test\\lib\\mocha.js:1606"
        },
        {
            "message": "Missing item type\nEnable growl support.",
            "line": " test\\lib\\mocha.js:1618"
        },
        {
            "message": "Missing item type\nIgnore `globals` array or string.",
            "line": " test\\lib\\mocha.js:1630"
        },
        {
            "message": "Missing item type\nEmit color output.",
            "line": " test\\lib\\mocha.js:1643"
        },
        {
            "message": "Missing item type\nUse inline diffs rather than +/-.",
            "line": " test\\lib\\mocha.js:1658"
        },
        {
            "message": "Missing item type\nSet the timeout in milliseconds.",
            "line": " test\\lib\\mocha.js:1673"
        },
        {
            "message": "Missing item type\nSet slowness threshold in milliseconds.",
            "line": " test\\lib\\mocha.js:1686"
        },
        {
            "message": "Missing item type\nMakes all tests async (accepting a callback)",
            "line": " test\\lib\\mocha.js:1699"
        },
        {
            "message": "Missing item type\nRun tests and invoke `fn()` when complete.",
            "line": " test\\lib\\mocha.js:1711"
        },
        {
            "message": "Missing item type\nHelpers.",
            "line": " test\\lib\\mocha.js:1738"
        },
        {
            "message": "Missing item type\nParse or format the given `val`.\n\nOptions:\n\n - `long` verbose formatting [false]",
            "line": " test\\lib\\mocha.js:1748"
        },
        {
            "message": "Missing item type\nParse the given `str` and return milliseconds.",
            "line": " test\\lib\\mocha.js:1767"
        },
        {
            "message": "Missing item type\nShort format for `ms`.",
            "line": " test\\lib\\mocha.js:1806"
        },
        {
            "message": "Missing item type\nLong format for `ms`.",
            "line": " test\\lib\\mocha.js:1822"
        },
        {
            "message": "Missing item type\nPluralization helper.",
            "line": " test\\lib\\mocha.js:1838"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " test\\lib\\mocha.js:1852"
        },
        {
            "message": "Missing item type\nSave timer references to avoid Sinon interfering (see GH-237).",
            "line": " test\\lib\\mocha.js:1861"
        },
        {
            "message": "Missing item type\nCheck if both stdio streams are associated with a tty.",
            "line": " test\\lib\\mocha.js:1871"
        },
        {
            "message": "Missing item type\nExpose `Base`.",
            "line": " test\\lib\\mocha.js:1877"
        },
        {
            "message": "Missing item type\nEnable coloring by default.",
            "line": " test\\lib\\mocha.js:1883"
        },
        {
            "message": "Missing item type\nInline diffs instead of +/-",
            "line": " test\\lib\\mocha.js:1889"
        },
        {
            "message": "Missing item type\nDefault color map.",
            "line": " test\\lib\\mocha.js:1895"
        },
        {
            "message": "Missing item type\nDefault symbol map.",
            "line": " test\\lib\\mocha.js:1921"
        },
        {
            "message": "Missing item type\nColor `str` with the given `type`,\nallowing colors to be disabled,\nas well as user-defined color\nschemes.",
            "line": " test\\lib\\mocha.js:1938"
        },
        {
            "message": "Missing item type\nExpose term window size, with some\ndefaults for when stderr is not a tty.",
            "line": " test\\lib\\mocha.js:1955"
        },
        {
            "message": "Missing item type\nExpose some basic cursor interactions\nthat are common among reporters.",
            "line": " test\\lib\\mocha.js:1968"
        },
        {
            "message": "Missing item type\nOutut the given `failures` as a list.",
            "line": " test\\lib\\mocha.js:2000"
        },
        {
            "message": "Missing item type\nInitialize a new `Base` reporter.\n\nAll other reporters generally\ninherit from this reporter, providing\nstats such as test duration, number\nof tests passed / failed etc.",
            "line": " test\\lib\\mocha.js:2058"
        },
        {
            "message": "Missing item type\nOutput common epilogue used by many of\nthe bundled reporters.",
            "line": " test\\lib\\mocha.js:2124"
        },
        {
            "message": "Missing item type\nPad the given `str` to `len`.",
            "line": " test\\lib\\mocha.js:2169"
        },
        {
            "message": "Missing item type\nReturns an inline diff between 2 strings with coloured ANSI output",
            "line": " test\\lib\\mocha.js:2184"
        },
        {
            "message": "Missing item type\nReturns a unified diff between 2 strings",
            "line": " test\\lib\\mocha.js:2218"
        },
        {
            "message": "Missing item type\nReturn a character diff for `err`.",
            "line": " test\\lib\\mocha.js:2250"
        },
        {
            "message": "Missing item type\nReturns a string with all invisible characters in plain text",
            "line": " test\\lib\\mocha.js:2268"
        },
        {
            "message": "Missing item type\nColor lines for `str`, using the color `name`.",
            "line": " test\\lib\\mocha.js:2281"
        },
        {
            "message": "Missing item type\nStringify `obj`.",
            "line": " test\\lib\\mocha.js:2296"
        },
        {
            "message": "Missing item type\nReturn a new object that has the keys in sorted order.",
            "line": " test\\lib\\mocha.js:2309"
        },
        {
            "message": "Missing item type\nCheck that a / b have the same type.",
            "line": " test\\lib\\mocha.js:2343"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " test\\lib\\mocha.js:2363"
        },
        {
            "message": "Missing item type\nExpose `Doc`.",
            "line": " test\\lib\\mocha.js:2370"
        },
        {
            "message": "Missing item type\nInitialize a new `Doc` reporter.",
            "line": " test\\lib\\mocha.js:2376"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " test\\lib\\mocha.js:2423"
        },
        {
            "message": "Missing item type\nExpose `Dot`.",
            "line": " test\\lib\\mocha.js:2430"
        },
        {
            "message": "Missing item type\nInitialize a new `Dot` matrix test reporter.",
            "line": " test\\lib\\mocha.js:2436"
        },
        {
            "message": "Missing item type\nInherit from `Base.prototype`.",
            "line": " test\\lib\\mocha.js:2479"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " test\\lib\\mocha.js:2492"
        },
        {
            "message": "Missing item type\nExpose `HTMLCov`.",
            "line": " test\\lib\\mocha.js:2499"
        },
        {
            "message": "Missing item type\nInitialize a new `JsCoverage` reporter.",
            "line": " test\\lib\\mocha.js:2505"
        },
        {
            "message": "Missing item type\nReturn coverage class for `n`.",
            "line": " test\\lib\\mocha.js:2529"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " test\\lib\\mocha.js:2546"
        },
        {
            "message": "Missing item type\nSave timer references to avoid Sinon interfering (see GH-237).",
            "line": " test\\lib\\mocha.js:2555"
        },
        {
            "message": "Missing item type\nExpose `HTML`.",
            "line": " test\\lib\\mocha.js:2565"
        },
        {
            "message": "Missing item type\nStats template.",
            "line": " test\\lib\\mocha.js:2571"
        },
        {
            "message": "Missing item type\nInitialize a new `HTML` reporter.",
            "line": " test\\lib\\mocha.js:2582"
        },
        {
            "message": "Missing item type\nProvide suite URL",
            "line": " test\\lib\\mocha.js:2725"
        },
        {
            "message": "Missing item type\nProvide test URL",
            "line": " test\\lib\\mocha.js:2735"
        },
        {
            "message": "Missing item type\nDisplay error `msg`.",
            "line": " test\\lib\\mocha.js:2745"
        },
        {
            "message": "Missing item type\nReturn a DOM fragment from `html`.",
            "line": " test\\lib\\mocha.js:2753"
        },
        {
            "message": "Missing item type\nCheck for suites that do not have elements\nwith `classname`, and hide them.",
            "line": " test\\lib\\mocha.js:2772"
        },
        {
            "message": "Missing item type\nUnhide .hidden suites.",
            "line": " test\\lib\\mocha.js:2785"
        },
        {
            "message": "Missing item type\nSet `el` text to `str`.",
            "line": " test\\lib\\mocha.js:2796"
        },
        {
            "message": "Missing item type\nListen on `event` with callback `fn`.",
            "line": " test\\lib\\mocha.js:2808"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " test\\lib\\mocha.js:2846"
        },
        {
            "message": "Missing item type\nExpose `JSONCov`.",
            "line": " test\\lib\\mocha.js:2852"
        },
        {
            "message": "Missing item type\nInitialize a new `JsCoverage` reporter.",
            "line": " test\\lib\\mocha.js:2858"
        },
        {
            "message": "Missing item type\nMap jscoverage data to a JSON structure\nsuitable for reporting.",
            "line": " test\\lib\\mocha.js:2900"
        },
        {
            "message": "Missing item type\nMap jscoverage data for a single source file\nto a JSON structure suitable for reporting.",
            "line": " test\\lib\\mocha.js:2938"
        },
        {
            "message": "Missing item type\nReturn a plain-object representation of `test`\nfree of cyclic properties etc.",
            "line": " test\\lib\\mocha.js:2982"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " test\\lib\\mocha.js:3003"
        },
        {
            "message": "Missing item type\nExpose `List`.",
            "line": " test\\lib\\mocha.js:3010"
        },
        {
            "message": "Missing item type\nInitialize a new `List` test reporter.",
            "line": " test\\lib\\mocha.js:3016"
        },
        {
            "message": "Missing item type\nReturn a plain-object representation of `test`\nfree of cyclic properties etc.",
            "line": " test\\lib\\mocha.js:3047"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " test\\lib\\mocha.js:3067"
        },
        {
            "message": "Missing item type\nExpose `JSON`.",
            "line": " test\\lib\\mocha.js:3075"
        },
        {
            "message": "Missing item type\nInitialize a new `JSON` reporter.",
            "line": " test\\lib\\mocha.js:3081"
        },
        {
            "message": "Missing item type\nReturn a plain-object representation of `test`\nfree of cyclic properties etc.",
            "line": " test\\lib\\mocha.js:3120"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " test\\lib\\mocha.js:3140"
        },
        {
            "message": "Missing item type\nExpose `Landing`.",
            "line": " test\\lib\\mocha.js:3148"
        },
        {
            "message": "Missing item type\nAirplane color.",
            "line": " test\\lib\\mocha.js:3154"
        },
        {
            "message": "Missing item type\nAirplane crash color.",
            "line": " test\\lib\\mocha.js:3160"
        },
        {
            "message": "Missing item type\nRunway color.",
            "line": " test\\lib\\mocha.js:3166"
        },
        {
            "message": "Missing item type\nInitialize a new `Landing` reporter.",
            "line": " test\\lib\\mocha.js:3172"
        },
        {
            "message": "Missing item type\nInherit from `Base.prototype`.",
            "line": " test\\lib\\mocha.js:3231"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " test\\lib\\mocha.js:3244"
        },
        {
            "message": "Missing item type\nExpose `List`.",
            "line": " test\\lib\\mocha.js:3252"
        },
        {
            "message": "Missing item type\nInitialize a new `List` test reporter.",
            "line": " test\\lib\\mocha.js:3258"
        },
        {
            "message": "Missing item type\nInherit from `Base.prototype`.",
            "line": " test\\lib\\mocha.js:3302"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " test\\lib\\mocha.js:3315"
        },
        {
            "message": "Missing item type\nExpose `Markdown`.",
            "line": " test\\lib\\mocha.js:3322"
        },
        {
            "message": "Missing item type\nInitialize a new `Markdown` reporter.",
            "line": " test\\lib\\mocha.js:3328"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " test\\lib\\mocha.js:3410"
        },
        {
            "message": "Missing item type\nExpose `Min`.",
            "line": " test\\lib\\mocha.js:3416"
        },
        {
            "message": "Missing item type\nInitialize a new `Min` minimal test reporter (best used with --watch).",
            "line": " test\\lib\\mocha.js:3422"
        },
        {
            "message": "Missing item type\nInherit from `Base.prototype`.",
            "line": " test\\lib\\mocha.js:3442"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " test\\lib\\mocha.js:3455"
        },
        {
            "message": "Missing item type\nExpose `Dot`.",
            "line": " test\\lib\\mocha.js:3462"
        },
        {
            "message": "Missing item type\nInitialize a new `Dot` matrix test reporter.",
            "line": " test\\lib\\mocha.js:3468"
        },
        {
            "message": "Missing item type\nDraw the nyan cat",
            "line": " test\\lib\\mocha.js:3514"
        },
        {
            "message": "Missing item type\nDraw the \"scoreboard\" showing the number\nof passes, failures and pending tests.",
            "line": " test\\lib\\mocha.js:3528"
        },
        {
            "message": "Missing item type\nAppend the rainbow.",
            "line": " test\\lib\\mocha.js:3553"
        },
        {
            "message": "Missing item type\nDraw the rainbow.",
            "line": " test\\lib\\mocha.js:3570"
        },
        {
            "message": "Missing item type\nDraw the nyan cat",
            "line": " test\\lib\\mocha.js:3588"
        },
        {
            "message": "Missing item type\nDraw nyan cat face.",
            "line": " test\\lib\\mocha.js:3624"
        },
        {
            "message": "Missing item type\nMove cursor up `n`.",
            "line": " test\\lib\\mocha.js:3644"
        },
        {
            "message": "Missing item type\nMove cursor down `n`.",
            "line": " test\\lib\\mocha.js:3655"
        },
        {
            "message": "Missing item type\nGenerate rainbow colors.",
            "line": " test\\lib\\mocha.js:3666"
        },
        {
            "message": "Missing item type\nApply rainbow to the given `str`.",
            "line": " test\\lib\\mocha.js:3688"
        },
        {
            "message": "Missing item type\nStdout helper.",
            "line": " test\\lib\\mocha.js:3702"
        },
        {
            "message": "Missing item type\nInherit from `Base.prototype`.",
            "line": " test\\lib\\mocha.js:3710"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " test\\lib\\mocha.js:3724"
        },
        {
            "message": "Missing item type\nExpose `Progress`.",
            "line": " test\\lib\\mocha.js:3732"
        },
        {
            "message": "Missing item type\nGeneral progress bar color.",
            "line": " test\\lib\\mocha.js:3738"
        },
        {
            "message": "Missing item type\nInitialize a new `Progress` bar test reporter.",
            "line": " test\\lib\\mocha.js:3744"
        },
        {
            "message": "Missing item type\nInherit from `Base.prototype`.",
            "line": " test\\lib\\mocha.js:3804"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " test\\lib\\mocha.js:3818"
        },
        {
            "message": "Missing item type\nExpose `Spec`.",
            "line": " test\\lib\\mocha.js:3826"
        },
        {
            "message": "Missing item type\nInitialize a new `Spec` test reporter.",
            "line": " test\\lib\\mocha.js:3832"
        },
        {
            "message": "Missing item type\nInherit from `Base.prototype`.",
            "line": " test\\lib\\mocha.js:3895"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " test\\lib\\mocha.js:3909"
        },
        {
            "message": "Missing item type\nExpose `TAP`.",
            "line": " test\\lib\\mocha.js:3917"
        },
        {
            "message": "Missing item type\nInitialize a new `TAP` reporter.",
            "line": " test\\lib\\mocha.js:3923"
        },
        {
            "message": "Missing item type\nReturn a TAP-safe title of `test`",
            "line": " test\\lib\\mocha.js:3970"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " test\\lib\\mocha.js:3986"
        },
        {
            "message": "Missing item type\nSave timer references to avoid Sinon interfering (see GH-237).",
            "line": " test\\lib\\mocha.js:3994"
        },
        {
            "message": "Missing item type\nExpose `XUnit`.",
            "line": " test\\lib\\mocha.js:4004"
        },
        {
            "message": "Missing item type\nInitialize a new `XUnit` reporter.",
            "line": " test\\lib\\mocha.js:4010"
        },
        {
            "message": "Missing item type\nInherit from `Base.prototype`.",
            "line": " test\\lib\\mocha.js:4051"
        },
        {
            "message": "Missing item type\nOutput tag for the given `test.`",
            "line": " test\\lib\\mocha.js:4061"
        },
        {
            "message": "Missing item type\nHTML tag helper.",
            "line": " test\\lib\\mocha.js:4083"
        },
        {
            "message": "Missing item type\nReturn cdata escaped CDATA `str`.",
            "line": " test\\lib\\mocha.js:4101"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " test\\lib\\mocha.js:4113"
        },
        {
            "message": "Missing item type\nSave timer references to avoid Sinon interfering (see GH-237).",
            "line": " test\\lib\\mocha.js:4121"
        },
        {
            "message": "Missing item type\nObject#toString().",
            "line": " test\\lib\\mocha.js:4131"
        },
        {
            "message": "Missing item type\nExpose `Runnable`.",
            "line": " test\\lib\\mocha.js:4137"
        },
        {
            "message": "Missing item type\nInitialize a new `Runnable` with the given `title` and callback `fn`.",
            "line": " test\\lib\\mocha.js:4143"
        },
        {
            "message": "Missing item type\nInherit from `EventEmitter.prototype`.",
            "line": " test\\lib\\mocha.js:4161"
        },
        {
            "message": "Missing item type\nSet & get timeout `ms`.",
            "line": " test\\lib\\mocha.js:4171"
        },
        {
            "message": "Missing item type\nSet & get slow `ms`.",
            "line": " test\\lib\\mocha.js:4188"
        },
        {
            "message": "Missing item type\nReturn the full title generated by recursively\nconcatenating the parent's full title.",
            "line": " test\\lib\\mocha.js:4204"
        },
        {
            "message": "Missing item type\nClear the timeout.",
            "line": " test\\lib\\mocha.js:4216"
        },
        {
            "message": "Missing item type\nInspect the runnable void of private properties.",
            "line": " test\\lib\\mocha.js:4226"
        },
        {
            "message": "Missing item type\nReset the timeout.",
            "line": " test\\lib\\mocha.js:4242"
        },
        {
            "message": "Missing item type\nWhitelist these globals for this test run",
            "line": " test\\lib\\mocha.js:4259"
        },
        {
            "message": "Missing item type\nRun the test and invoke `fn(err)`.",
            "line": " test\\lib\\mocha.js:4269"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " test\\lib\\mocha.js:4347"
        },
        {
            "message": "Missing item type\nNon-enumerable globals.",
            "line": " test\\lib\\mocha.js:4358"
        },
        {
            "message": "Missing item type\nExpose `Runner`.",
            "line": " test\\lib\\mocha.js:4371"
        },
        {
            "message": "Missing item type\nInitialize a `Runner` for the given `suite`.\n\nEvents:\n\n  - `start`  execution started\n  - `end`  execution complete\n  - `suite`  (suite) test suite execution started\n  - `suite end`  (suite) all tests (and sub-suites) have finished\n  - `test`  (test) test execution started\n  - `test end`  (test) test completed\n  - `hook`  (hook) hook execution started\n  - `hook end`  (hook) hook complete\n  - `pass`  (test) test passed\n  - `fail`  (test, err) test failed\n  - `pending`  (test) test pending",
            "line": " test\\lib\\mocha.js:4377"
        },
        {
            "message": "Missing item type\nWrapper for setImmediate, process.nextTick, or browser polyfill.",
            "line": " test\\lib\\mocha.js:4410"
        },
        {
            "message": "Missing item type\nInherit from `EventEmitter.prototype`.",
            "line": " test\\lib\\mocha.js:4419"
        },
        {
            "message": "Missing item type\nRun tests with full titles matching `re`. Updates runner.total\nwith number of tests matched.",
            "line": " test\\lib\\mocha.js:4429"
        },
        {
            "message": "Missing item type\nReturns the number of tests matching the grep search for the\ngiven suite.",
            "line": " test\\lib\\mocha.js:4447"
        },
        {
            "message": "Missing item type\nReturn a list of global properties.",
            "line": " test\\lib\\mocha.js:4469"
        },
        {
            "message": "Missing item type\nAllow the given `arr` of globals.",
            "line": " test\\lib\\mocha.js:4488"
        },
        {
            "message": "Missing item type\nCheck for global variable leaks.",
            "line": " test\\lib\\mocha.js:4503"
        },
        {
            "message": "Missing item type\nFail the given `test`.",
            "line": " test\\lib\\mocha.js:4534"
        },
        {
            "message": "Missing item type\nFail the given `hook` with `err`.\n\nHook failures work in the following pattern:\n- If bail, then exit\n- Failed `before` hook skips all tests in a suite and subsuites,\n  but jumps to corresponding `after` hook\n- Failed `before each` hook skips remaining tests in a\n  suite and jumps to corresponding `after each` hook,\n  which is run only once\n- Failed `after` hook does not alter\n  execution order\n- Failed `after each` hook skips remaining tests in a\n  suite and subsuites, but executes other `after each`\n  hooks",
            "line": " test\\lib\\mocha.js:4553"
        },
        {
            "message": "Missing item type\nRun hook `name` callbacks and then invoke `fn()`.",
            "line": " test\\lib\\mocha.js:4581"
        },
        {
            "message": "Missing item type\nRun hook `name` for the given array of `suites`\nin order, and callback `fn(err, errSuite)`.",
            "line": " test\\lib\\mocha.js:4630"
        },
        {
            "message": "Missing item type\nRun hooks from the top level down.",
            "line": " test\\lib\\mocha.js:4666"
        },
        {
            "message": "Missing item type\nRun hooks from the bottom up.",
            "line": " test\\lib\\mocha.js:4679"
        },
        {
            "message": "Missing item type\nReturn an array of parent Suites from\nclosest to furthest.",
            "line": " test\\lib\\mocha.js:4692"
        },
        {
            "message": "Missing item type\nRun the current test and callback `fn(err)`.",
            "line": " test\\lib\\mocha.js:4707"
        },
        {
            "message": "Missing item type\nRun tests in the given `suite` and invoke\nthe callback `fn()` when complete.",
            "line": " test\\lib\\mocha.js:4730"
        },
        {
            "message": "Missing item type\nRun the given `suite` and invoke the\ncallback `fn()` when complete.",
            "line": " test\\lib\\mocha.js:4823"
        },
        {
            "message": "Missing item type\nHandle uncaught exceptions.",
            "line": " test\\lib\\mocha.js:4878"
        },
        {
            "message": "Missing item type\nRun the root suite and invoke `fn(failures)`\non completion.",
            "line": " test\\lib\\mocha.js:4904"
        },
        {
            "message": "Missing item type\nCleanly abort execution",
            "line": " test\\lib\\mocha.js:4943"
        },
        {
            "message": "Missing item type\nFilter leaks with the given globals flagged as `ok`.",
            "line": " test\\lib\\mocha.js:4954"
        },
        {
            "message": "Missing item type\nArray of globals dependent on the environment.",
            "line": " test\\lib\\mocha.js:4988"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " test\\lib\\mocha.js:5017"
        },
        {
            "message": "Missing item type\nExpose `Suite`.",
            "line": " test\\lib\\mocha.js:5027"
        },
        {
            "message": "Missing item type\nCreate a new `Suite` with the given `title`\nand parent `Suite`. When a suite with the\nsame title is already present, that suite\nis returned to provide nicer reporter\nand more flexible meta-testing.",
            "line": " test\\lib\\mocha.js:5033"
        },
        {
            "message": "Missing item type\nInitialize a new `Suite` with the given\n`title` and `ctx`.",
            "line": " test\\lib\\mocha.js:5055"
        },
        {
            "message": "Missing item type\nInherit from `EventEmitter.prototype`.",
            "line": " test\\lib\\mocha.js:5080"
        },
        {
            "message": "Missing item type\nReturn a clone of this `Suite`.",
            "line": " test\\lib\\mocha.js:5090"
        },
        {
            "message": "Missing item type\nSet timeout `ms` or short-hand such as \"2s\".",
            "line": " test\\lib\\mocha.js:5107"
        },
        {
            "message": "Missing item type\nSet slow `ms` or short-hand such as \"2s\".",
            "line": " test\\lib\\mocha.js:5123"
        },
        {
            "message": "Missing item type\nSets whether to bail after first error.",
            "line": " test\\lib\\mocha.js:5139"
        },
        {
            "message": "Missing item type\nRun `fn(test[, done])` before running tests.",
            "line": " test\\lib\\mocha.js:5154"
        },
        {
            "message": "Missing item type\nRun `fn(test[, done])` after running tests.",
            "line": " test\\lib\\mocha.js:5174"
        },
        {
            "message": "Missing item type\nRun `fn(test[, done])` before each test case.",
            "line": " test\\lib\\mocha.js:5194"
        },
        {
            "message": "Missing item type\nRun `fn(test[, done])` after each test case.",
            "line": " test\\lib\\mocha.js:5214"
        },
        {
            "message": "Missing item type\nAdd a test `suite`.",
            "line": " test\\lib\\mocha.js:5234"
        },
        {
            "message": "Missing item type\nAdd a `test` to this suite.",
            "line": " test\\lib\\mocha.js:5252"
        },
        {
            "message": "Missing item type\nReturn the full title generated by recursively\nconcatenating the parent's full title.",
            "line": " test\\lib\\mocha.js:5270"
        },
        {
            "message": "Missing item type\nReturn the total number of tests.",
            "line": " test\\lib\\mocha.js:5286"
        },
        {
            "message": "Missing item type\nIterates through each suite recursively to find\nall tests. Applies a function in the format\n`fn(test)`.",
            "line": " test\\lib\\mocha.js:5299"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " test\\lib\\mocha.js:5321"
        },
        {
            "message": "Missing item type\nExpose `Test`.",
            "line": " test\\lib\\mocha.js:5327"
        },
        {
            "message": "Missing item type\nInitialize a new `Test` with the given `title` and callback `fn`.",
            "line": " test\\lib\\mocha.js:5333"
        },
        {
            "message": "Missing item type\nInherit from `Runnable.prototype`.",
            "line": " test\\lib\\mocha.js:5347"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " test\\lib\\mocha.js:5360"
        },
        {
            "message": "Missing item type\nIgnored directories.",
            "line": " test\\lib\\mocha.js:5369"
        },
        {
            "message": "Missing item type\nEscape special characters in the given string of html.",
            "line": " test\\lib\\mocha.js:5375"
        },
        {
            "message": "Missing item type\nArray#forEach (<=IE8)",
            "line": " test\\lib\\mocha.js:5391"
        },
        {
            "message": "Missing item type\nArray#map (<=IE8)",
            "line": " test\\lib\\mocha.js:5405"
        },
        {
            "message": "Missing item type\nArray#indexOf (<=IE8)",
            "line": " test\\lib\\mocha.js:5421"
        },
        {
            "message": "Missing item type\nArray#reduce (<=IE8)",
            "line": " test\\lib\\mocha.js:5438"
        },
        {
            "message": "Missing item type\nArray#filter (<=IE8)",
            "line": " test\\lib\\mocha.js:5457"
        },
        {
            "message": "Missing item type\nObject.keys (<=IE8)",
            "line": " test\\lib\\mocha.js:5476"
        },
        {
            "message": "Missing item type\nWatch the given `files` for changes\nand invoke `fn(file)` on modification.",
            "line": " test\\lib\\mocha.js:5497"
        },
        {
            "message": "Missing item type\nIgnored files.",
            "line": " test\\lib\\mocha.js:5516"
        },
        {
            "message": "Missing item type\nLookup files in the given `dir`.",
            "line": " test\\lib\\mocha.js:5524"
        },
        {
            "message": "Missing item type\nCompute a slug from the given `str`.",
            "line": " test\\lib\\mocha.js:5548"
        },
        {
            "message": "Missing item type\nStrip the function definition from `str`,\nand re-indent for pre whitespace.",
            "line": " test\\lib\\mocha.js:5563"
        },
        {
            "message": "Missing item type\nEscape regular expression characters in `str`.",
            "line": " test\\lib\\mocha.js:5583"
        },
        {
            "message": "Missing item type\nTrim the given `str`.",
            "line": " test\\lib\\mocha.js:5595"
        },
        {
            "message": "Missing item type\nParse the given `qs`.",
            "line": " test\\lib\\mocha.js:5607"
        },
        {
            "message": "Missing item type\nHighlight the given string of `js`.",
            "line": " test\\lib\\mocha.js:5626"
        },
        {
            "message": "Missing item type\nHighlight the contents of tag `name`.",
            "line": " test\\lib\\mocha.js:5646"
        },
        {
            "message": "Missing item type\nSave timer references to avoid Sinon interfering (see GH-237).",
            "line": " test\\lib\\mocha.js:5664"
        },
        {
            "message": "Missing item type\nNode shims.\n\nThese are meant only to allow\nmocha.js to run untouched, not\nto allow running node code in\nthe browser.",
            "line": " test\\lib\\mocha.js:5674"
        },
        {
            "message": "Missing item type\nRemove uncaughtException listener.",
            "line": " test\\lib\\mocha.js:5689"
        },
        {
            "message": "Missing item type\nImplements uncaughtException listener.",
            "line": " test\\lib\\mocha.js:5701"
        },
        {
            "message": "Missing item type\nExpose mocha.",
            "line": " test\\lib\\mocha.js:5715"
        },
        {
            "message": "Missing item type\nHigh-performance override of Runner.immediately.",
            "line": " test\\lib\\mocha.js:5742"
        },
        {
            "message": "Missing item type\nFunction to allow assertion libraries to throw errors directly into mocha.\nThis is useful when running tests in a browser because window.onerror will\nonly receive the 'message' attribute of the Error.",
            "line": " test\\lib\\mocha.js:5753"
        },
        {
            "message": "Missing item type\nOverride ui to ensure that the ui functions are initialized.\nNormally this would happen in Mocha.prototype.loadFiles.",
            "line": " test\\lib\\mocha.js:5765"
        },
        {
            "message": "Missing item type\nSetup mocha with the given setting options.",
            "line": " test\\lib\\mocha.js:5776"
        },
        {
            "message": "Missing item type\nRun mocha, returning the Runner.",
            "line": " test\\lib\\mocha.js:5786"
        },
        {
            "message": "Missing item type\nExpose the process shim.",
            "line": " test\\lib\\mocha.js:5807"
        },
        {
            "message": "Missing item type\nSinon.JS 1.8.2, 2014/02/11",
            "line": " test\\lib\\sinon.js:1"
        },
        {
            "message": "Missing item type",
            "line": " test\\lib\\sinon.js:63"
        },
        {
            "message": "Missing item type",
            "line": " test\\lib\\sinon.js:85"
        },
        {
            "message": "Missing item type",
            "line": " test\\lib\\sinon.js:105"
        },
        {
            "message": "Missing item type",
            "line": " test\\lib\\sinon.js:119"
        },
        {
            "message": "Missing item type",
            "line": " test\\lib\\sinon.js:133"
        },
        {
            "message": "Missing item type",
            "line": " test\\lib\\sinon.js:143"
        },
        {
            "message": "Missing item type",
            "line": " test\\lib\\sinon.js:161"
        },
        {
            "message": "Missing item type\nused to check, if the value of a property is an object\n(cyclic logic is only needed for objects)\nonly needed for cyclic logic",
            "line": " test\\lib\\sinon.js:191"
        },
        {
            "message": "Missing item type\nreturns the index of the given object in the\ngiven objects array, -1 if not contained\nonly needed for cyclic logic",
            "line": " test\\lib\\sinon.js:211"
        },
        {
            "message": "Missing item type",
            "line": " test\\lib\\sinon.js:358"
        },
        {
            "message": "Missing item type\nSinon core utilities. For internal use only.",
            "line": " test\\lib\\sinon.js:618"
        },
        {
            "message": "Missing item type\nMatch functions",
            "line": " test\\lib\\sinon.js:987"
        },
        {
            "message": "Missing item type",
            "line": " test\\lib\\sinon.js:1223"
        },
        {
            "message": "Missing item type\nSpy calls",
            "line": " test\\lib\\sinon.js:1229"
        },
        {
            "message": "Missing item type",
            "line": " test\\lib\\sinon.js:1426"
        },
        {
            "message": "Missing item type\nSpy functions",
            "line": " test\\lib\\sinon.js:1432"
        },
        {
            "message": "Missing item type",
            "line": " test\\lib\\sinon.js:1833"
        },
        {
            "message": "Missing item type\nStub behavior",
            "line": " test\\lib\\sinon.js:1838"
        },
        {
            "message": "Missing item type",
            "line": " test\\lib\\sinon.js:2164"
        },
        {
            "message": "Missing item type\nStub functions",
            "line": " test\\lib\\sinon.js:2171"
        },
        {
            "message": "Missing item type",
            "line": " test\\lib\\sinon.js:2323"
        },
        {
            "message": "Missing item type\nMock functions.",
            "line": " test\\lib\\sinon.js:2329"
        },
        {
            "message": "Missing item type",
            "line": " test\\lib\\sinon.js:2772"
        },
        {
            "message": "Missing item type\nCollections of stubs, spies and mocks.",
            "line": " test\\lib\\sinon.js:2779"
        },
        {
            "message": "Missing item type\nFake timer API\nsetTimeout\nsetInterval\nclearTimeout\nclearInterval\ntick\nreset\nDate\n\nInspired by jsUnitMockTimeOut from JsUnit",
            "line": " test\\lib\\sinon.js:2927"
        },
        {
            "message": "Missing item type\nMinimal Event interface implementation\n\nOriginal implementation by Sven Fuchs: https://gist.github.com/995028\nModifications and tests by Christian Johansen.",
            "line": " test\\lib\\sinon.js:3312"
        },
        {
            "message": "Missing item type",
            "line": " test\\lib\\sinon.js:3385"
        },
        {
            "message": "Missing item type\nFake XMLHttpRequest object",
            "line": " test\\lib\\sinon.js:3391"
        },
        {
            "message": "Missing item type",
            "line": " test\\lib\\sinon.js:3953"
        },
        {
            "message": "Missing item type\nThe Sinon \"server\" mimics a web server that receives requests from\nsinon.FakeXMLHttpRequest and provides an API to respond to those requests,\nboth synchronously and asynchronously. To respond synchronuously, canned\nanswers have to be provided upfront.",
            "line": " test\\lib\\sinon.js:3958"
        },
        {
            "message": "Missing item type",
            "line": " test\\lib\\sinon.js:4165"
        },
        {
            "message": "Missing item type\nAdd-on for sinon.fakeServer that automatically handles a fake timer along with\nthe FakeXMLHttpRequest. The direct inspiration for this add-on is jQuery\n1.3.x, which does not use xhr object's onreadystatehandler at all - instead,\nit polls the object for completion with setInterval. Dispite the direct\nmotivation, there is nothing jQuery-specific in this file, so it can be used\nin any environment where the ajax implementation depends on setInterval or\nsetTimeout.",
            "line": " test\\lib\\sinon.js:4171"
        },
        {
            "message": "Missing item type",
            "line": " test\\lib\\sinon.js:4248"
        },
        {
            "message": "Missing item type\nManages fake collections as well as fake utilities such as Sinon's\ntimers and fake XHR implementation in one convenient object.",
            "line": " test\\lib\\sinon.js:4256"
        },
        {
            "message": "Missing item type",
            "line": " test\\lib\\sinon.js:4373"
        },
        {
            "message": "Missing item type\nTest function, sandboxes fakes",
            "line": " test\\lib\\sinon.js:4381"
        },
        {
            "message": "Missing item type",
            "line": " test\\lib\\sinon.js:4448"
        },
        {
            "message": "Missing item type\nTest case, sandboxes all test functions",
            "line": " test\\lib\\sinon.js:4454"
        },
        {
            "message": "Missing item type",
            "line": " test\\lib\\sinon.js:4545"
        },
        {
            "message": "Missing item type\nAssertions matching the test spy retrieval interface.",
            "line": " test\\lib\\sinon.js:4551"
        },
        {
            "message": "Missing item type\nCreated by zhanglingkang on 2014/7/30.",
            "line": " test\\test01.js:1"
        }
    ]
}